/* soapStub.h
   Generated by gSOAP 2.8.122 for mdx_acp_operational.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_Upd	"http://tempuri.org/mdx_slot_update.wsdl"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 208122
# error "GSOAP VERSION 208122 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* mdx_acp_operational.h:206 */
#ifndef SOAP_TYPE_Upd__ErrCodeDef
#define SOAP_TYPE_Upd__ErrCodeDef (17)
/* Upd:ErrCodeDef */
enum Upd__ErrCodeDef {
	Upd__ErrCodeDef__ERR_USCOREOK = 0,
	Upd__ErrCodeDef__ERR_USCOREINVALID_USCORESTATE = 1,
	Upd__ErrCodeDef__ERR_USCOREFAILED = 2
};
#endif

/* mdx_acp_operational.h:232 */
#ifndef SOAP_TYPE_Upd__UpdateFailedReasonDef
#define SOAP_TYPE_Upd__UpdateFailedReasonDef (18)
/* Upd:UpdateFailedReasonDef */
enum Upd__UpdateFailedReasonDef {
	Upd__UpdateFailedReasonDef__NONE = 0,
	Upd__UpdateFailedReasonDef__CONFIGURATION_USCORENOT_USCORESUPPORTED = 1,
	Upd__UpdateFailedReasonDef__UPDATE_USCORESCRIPT_USCORENOT_USCOREFOUND = 2,
	Upd__UpdateFailedReasonDef__INVALID_USCOREUPDATE_USCORESCRIPT = 3,
	Upd__UpdateFailedReasonDef__SOFTWARE_USCORENOT_USCORESTARTED = 4,
	Upd__UpdateFailedReasonDef__SOFTWARE_USCORENOT_USCORESTOPPED = 5,
	Upd__UpdateFailedReasonDef__UPDATE_USCOREINTERRUPTED = 6,
	Upd__UpdateFailedReasonDef__UPDATE_USCORESCRIPT_USCOREFAILED = 7,
	Upd__UpdateFailedReasonDef__UPDATE_USCOREINTERNAL_USCOREERROR = 8,
	Upd__UpdateFailedReasonDef__UNDEFINED = 9
};
#endif

/* mdx_acp_operational.h:301 */
#ifndef SOAP_TYPE_Upd__UpdateStateDef
#define SOAP_TYPE_Upd__UpdateStateDef (20)
/* Upd:UpdateStateDef */
enum Upd__UpdateStateDef {
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREINITIALISING = 0,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREIDLE = 1,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREPREPARING = 2,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREPREPARE_USCOREERROR = 3,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREIN_USCOREPROGRESS = 4,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREREADY_USCOREERROR = 5,
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREREADY_USCOREOK = 6
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class Upd__SlotVersionDef;	/* mdx_acp_operational.h:149 */
class Upd__UpdateProgressDef;	/* mdx_acp_operational.h:151 */
class _Upd__UpdateRequest;	/* mdx_acp_operational.h:153 */
class _Upd__UpdateRequestResponse;	/* mdx_acp_operational.h:155 */
class _Upd__UpdateRebootResponse;	/* mdx_acp_operational.h:160 */
class _Upd__UpdateGetStatusResponse;	/* mdx_acp_operational.h:165 */
class _Upd__UpdateGetFailedReasonResponse;	/* mdx_acp_operational.h:170 */
class _Upd__UpdateGetInterfaceVersionResponse;	/* mdx_acp_operational.h:175 */
class _Upd__UpdateGetConfigurationResponse;	/* mdx_acp_operational.h:180 */
struct __Upd__UpdateGetInterfaceVersion;	/* mdx_acp_operational.h:837 */
struct __Upd__UpdateRequest;	/* mdx_acp_operational.h:904 */
struct __Upd__UpdateReboot;	/* mdx_acp_operational.h:971 */
struct __Upd__UpdateGetStatus;	/* mdx_acp_operational.h:1038 */
struct __Upd__UpdateGetFailedReason;	/* mdx_acp_operational.h:1105 */
struct __Upd__UpdateGetConfiguration;	/* mdx_acp_operational.h:1172 */

/* mdx_acp_operational.h:149 */
#ifndef SOAP_TYPE_Upd__SlotVersionDef
#define SOAP_TYPE_Upd__SlotVersionDef (7)
/* complex XML schema type 'Upd:SlotVersionDef': */
class SOAP_CMAC Upd__SlotVersionDef {
      public:
        /// Required element 'IspVersion' of XML schema type 'xsd:string'
        char *IspVersion;
        /// Required element 'IswVersion' of XML schema type 'xsd:string'
        char *IswVersion;
        /// Required element 'CfwVersion' of XML schema type 'xsd:string'
        char *CfwVersion;
        /// Required element 'DfwVersion' of XML schema type 'xsd:string'
        char *DfwVersion;
        /// Required element 'HwVersion' of XML schema type 'xsd:string'
        char *HwVersion;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_Upd__SlotVersionDef
        virtual long soap_type(void) const { return SOAP_TYPE_Upd__SlotVersionDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type Upd__SlotVersionDef, default initialized and not managed by a soap context
        virtual Upd__SlotVersionDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(Upd__SlotVersionDef); }
      public:
        /// Constructor with default initializations
        Upd__SlotVersionDef() : IspVersion(), IswVersion(), CfwVersion(), DfwVersion(), HwVersion(), soap() { }
        virtual ~Upd__SlotVersionDef() { }
        /// Friend allocator used by soap_new_Upd__SlotVersionDef(struct soap*, int)
        friend SOAP_FMAC1 Upd__SlotVersionDef * SOAP_FMAC2 soap_instantiate_Upd__SlotVersionDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:151 */
#ifndef SOAP_TYPE_Upd__UpdateProgressDef
#define SOAP_TYPE_Upd__UpdateProgressDef (8)
/* complex XML schema type 'Upd:UpdateProgressDef': */
class SOAP_CMAC Upd__UpdateProgressDef {
      public:
        /// Required element 'CurrentStep' of XML schema type 'xsd:int'
        int CurrentStep;
        /// Required element 'TotalSteps' of XML schema type 'xsd:int'
        int TotalSteps;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_Upd__UpdateProgressDef
        virtual long soap_type(void) const { return SOAP_TYPE_Upd__UpdateProgressDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type Upd__UpdateProgressDef, default initialized and not managed by a soap context
        virtual Upd__UpdateProgressDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(Upd__UpdateProgressDef); }
      public:
        /// Constructor with default initializations
        Upd__UpdateProgressDef() : CurrentStep(), TotalSteps(), soap() { }
        virtual ~Upd__UpdateProgressDef() { }
        /// Friend allocator used by soap_new_Upd__UpdateProgressDef(struct soap*, int)
        friend SOAP_FMAC1 Upd__UpdateProgressDef * SOAP_FMAC2 soap_instantiate_Upd__UpdateProgressDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:153 */
#ifndef SOAP_TYPE__Upd__UpdateRequest
#define SOAP_TYPE__Upd__UpdateRequest (9)
/* complex XML schema type 'Upd:UpdateRequest': */
class SOAP_CMAC _Upd__UpdateRequest {
      public:
        /// Required element 'ScriptName' of XML schema type 'Upd:UpdateScriptDef'
        char *ScriptName;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateRequest
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateRequest, default initialized and not managed by a soap context
        virtual _Upd__UpdateRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateRequest); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateRequest() : ScriptName(), soap() { }
        virtual ~_Upd__UpdateRequest() { }
        /// Friend allocator used by soap_new__Upd__UpdateRequest(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateRequest * SOAP_FMAC2 soap_instantiate__Upd__UpdateRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:155 */
#ifndef SOAP_TYPE__Upd__UpdateRequestResponse
#define SOAP_TYPE__Upd__UpdateRequestResponse (10)
/* complex XML schema type 'Upd:UpdateRequestResponse': */
class SOAP_CMAC _Upd__UpdateRequestResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateRequestResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateRequestResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateRequestResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateRequestResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateRequestResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateRequestResponse() : Error(), soap() { }
        virtual ~_Upd__UpdateRequestResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateRequestResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateRequestResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateRequestResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:160 */
#ifndef SOAP_TYPE__Upd__UpdateRebootResponse
#define SOAP_TYPE__Upd__UpdateRebootResponse (11)
/* complex XML schema type 'Upd:UpdateRebootResponse': */
class SOAP_CMAC _Upd__UpdateRebootResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateRebootResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateRebootResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateRebootResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateRebootResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateRebootResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateRebootResponse() : Error(), soap() { }
        virtual ~_Upd__UpdateRebootResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateRebootResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateRebootResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateRebootResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:165 */
#ifndef SOAP_TYPE__Upd__UpdateGetStatusResponse
#define SOAP_TYPE__Upd__UpdateGetStatusResponse (12)
/* complex XML schema type 'Upd:UpdateGetStatusResponse': */
class SOAP_CMAC _Upd__UpdateGetStatusResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Required element 'UpdateState' of XML schema type 'Upd:UpdateStateDef'
        enum Upd__UpdateStateDef UpdateState;
        /// Required element 'UpdateProgress' of XML schema type 'Upd:UpdateProgressDef'
        Upd__UpdateProgressDef *UpdateProgress;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateGetStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateGetStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateGetStatusResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateGetStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateGetStatusResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateGetStatusResponse() : Error(), UpdateState(), UpdateProgress(), soap() { }
        virtual ~_Upd__UpdateGetStatusResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateGetStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateGetStatusResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:170 */
#ifndef SOAP_TYPE__Upd__UpdateGetFailedReasonResponse
#define SOAP_TYPE__Upd__UpdateGetFailedReasonResponse (13)
/* complex XML schema type 'Upd:UpdateGetFailedReasonResponse': */
class SOAP_CMAC _Upd__UpdateGetFailedReasonResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Required element 'FailedReason' of XML schema type 'Upd:UpdateFailedReasonDef'
        enum Upd__UpdateFailedReasonDef FailedReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateGetFailedReasonResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateGetFailedReasonResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateGetFailedReasonResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateGetFailedReasonResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateGetFailedReasonResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateGetFailedReasonResponse() : Error(), FailedReason(), soap() { }
        virtual ~_Upd__UpdateGetFailedReasonResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateGetFailedReasonResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateGetFailedReasonResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetFailedReasonResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:175 */
#ifndef SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse
#define SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse (14)
/* complex XML schema type 'Upd:UpdateGetInterfaceVersionResponse': */
class SOAP_CMAC _Upd__UpdateGetInterfaceVersionResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Required element 'UpdateInterfaceVersion' of XML schema type 'Upd:UpdateInterfaceVersionDef'
        char *UpdateInterfaceVersion;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateGetInterfaceVersionResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateGetInterfaceVersionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateGetInterfaceVersionResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateGetInterfaceVersionResponse() : Error(), UpdateInterfaceVersion(), soap() { }
        virtual ~_Upd__UpdateGetInterfaceVersionResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateGetInterfaceVersionResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateGetInterfaceVersionResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetInterfaceVersionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:180 */
#ifndef SOAP_TYPE__Upd__UpdateGetConfigurationResponse
#define SOAP_TYPE__Upd__UpdateGetConfigurationResponse (15)
/* complex XML schema type 'Upd:UpdateGetConfigurationResponse': */
class SOAP_CMAC _Upd__UpdateGetConfigurationResponse {
      public:
        /// Required element 'Error' of XML schema type 'Upd:ErrCodeDef'
        enum Upd__ErrCodeDef Error;
        /// Required element 'SlotVersions' of XML schema type 'Upd:SlotVersionDef'
        Upd__SlotVersionDef *SlotVersions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Upd__UpdateGetConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__Upd__UpdateGetConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Upd__UpdateGetConfigurationResponse, default initialized and not managed by a soap context
        virtual _Upd__UpdateGetConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_Upd__UpdateGetConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _Upd__UpdateGetConfigurationResponse() : Error(), SlotVersions(), soap() { }
        virtual ~_Upd__UpdateGetConfigurationResponse() { }
        /// Friend allocator used by soap_new__Upd__UpdateGetConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _Upd__UpdateGetConfigurationResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:837 */
#ifndef SOAP_TYPE___Upd__UpdateGetInterfaceVersion
#define SOAP_TYPE___Upd__UpdateGetInterfaceVersion (26)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateGetInterfaceVersion {
      public:
        /** Optional element 'Upd:UpdateGetInterfaceVersion' of XML schema type 'xsd:anyType' */
        char *Upd__UpdateGetInterfaceVersion;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateGetInterfaceVersion */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateGetInterfaceVersion; }
        /** Constructor with member initializations */
        __Upd__UpdateGetInterfaceVersion() : Upd__UpdateGetInterfaceVersion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateGetInterfaceVersion * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetInterfaceVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:904 */
#ifndef SOAP_TYPE___Upd__UpdateRequest
#define SOAP_TYPE___Upd__UpdateRequest (30)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateRequest {
      public:
        /** Optional element 'Upd:UpdateRequest' of XML schema type 'Upd:UpdateRequest' */
        _Upd__UpdateRequest *Upd__UpdateRequest;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateRequest */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateRequest; }
        /** Constructor with member initializations */
        __Upd__UpdateRequest() : Upd__UpdateRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateRequest * SOAP_FMAC2 soap_instantiate___Upd__UpdateRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:971 */
#ifndef SOAP_TYPE___Upd__UpdateReboot
#define SOAP_TYPE___Upd__UpdateReboot (33)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateReboot {
      public:
        /** Optional element 'Upd:UpdateReboot' of XML schema type 'xsd:anyType' */
        char *Upd__UpdateReboot;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateReboot */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateReboot; }
        /** Constructor with member initializations */
        __Upd__UpdateReboot() : Upd__UpdateReboot() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateReboot * SOAP_FMAC2 soap_instantiate___Upd__UpdateReboot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:1038 */
#ifndef SOAP_TYPE___Upd__UpdateGetStatus
#define SOAP_TYPE___Upd__UpdateGetStatus (36)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateGetStatus {
      public:
        /** Optional element 'Upd:UpdateGetStatus' of XML schema type 'xsd:anyType' */
        char *Upd__UpdateGetStatus;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateGetStatus */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateGetStatus; }
        /** Constructor with member initializations */
        __Upd__UpdateGetStatus() : Upd__UpdateGetStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateGetStatus * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:1105 */
#ifndef SOAP_TYPE___Upd__UpdateGetFailedReason
#define SOAP_TYPE___Upd__UpdateGetFailedReason (39)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateGetFailedReason {
      public:
        /** Optional element 'Upd:UpdateGetFailedReason' of XML schema type 'xsd:anyType' */
        char *Upd__UpdateGetFailedReason;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateGetFailedReason */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateGetFailedReason; }
        /** Constructor with member initializations */
        __Upd__UpdateGetFailedReason() : Upd__UpdateGetFailedReason() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateGetFailedReason * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetFailedReason(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:1172 */
#ifndef SOAP_TYPE___Upd__UpdateGetConfiguration
#define SOAP_TYPE___Upd__UpdateGetConfiguration (42)
/* Wrapper: */
struct SOAP_CMAC __Upd__UpdateGetConfiguration {
      public:
        /** Optional element 'Upd:UpdateGetConfiguration' of XML schema type 'xsd:anyType' */
        char *Upd__UpdateGetConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___Upd__UpdateGetConfiguration */
        long soap_type() const { return SOAP_TYPE___Upd__UpdateGetConfiguration; }
        /** Constructor with member initializations */
        __Upd__UpdateGetConfiguration() : Upd__UpdateGetConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Upd__UpdateGetConfiguration * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mdx_acp_operational.h:1413 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mdx_acp_operational.h:1413 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mdx_acp_operational.h:1413 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mdx_acp_operational.h:1413 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (49)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mdx_acp_operational.h:1413 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (50)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* mdx_acp_operational.h:196 */
#ifndef SOAP_TYPE_Upd__UpdateInterfaceVersionDef
#define SOAP_TYPE_Upd__UpdateInterfaceVersionDef (16)
typedef char *Upd__UpdateInterfaceVersionDef;
#endif

/* mdx_acp_operational.h:291 */
#ifndef SOAP_TYPE_Upd__UpdateScriptDef
#define SOAP_TYPE_Upd__UpdateScriptDef (19)
typedef char *Upd__UpdateScriptDef;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* enum Upd__UpdateStateDef has binding name 'Upd__UpdateStateDef' for type 'Upd:UpdateStateDef' */
#ifndef SOAP_TYPE_Upd__UpdateStateDef
#define SOAP_TYPE_Upd__UpdateStateDef (20)
#endif

/* enum Upd__UpdateFailedReasonDef has binding name 'Upd__UpdateFailedReasonDef' for type 'Upd:UpdateFailedReasonDef' */
#ifndef SOAP_TYPE_Upd__UpdateFailedReasonDef
#define SOAP_TYPE_Upd__UpdateFailedReasonDef (18)
#endif

/* enum Upd__ErrCodeDef has binding name 'Upd__ErrCodeDef' for type 'Upd:ErrCodeDef' */
#ifndef SOAP_TYPE_Upd__ErrCodeDef
#define SOAP_TYPE_Upd__ErrCodeDef (17)
#endif

/* _Upd__UpdateGetConfigurationResponse has binding name '_Upd__UpdateGetConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateGetConfigurationResponse
#define SOAP_TYPE__Upd__UpdateGetConfigurationResponse (15)
#endif

/* _Upd__UpdateGetInterfaceVersionResponse has binding name '_Upd__UpdateGetInterfaceVersionResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse
#define SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse (14)
#endif

/* _Upd__UpdateGetFailedReasonResponse has binding name '_Upd__UpdateGetFailedReasonResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateGetFailedReasonResponse
#define SOAP_TYPE__Upd__UpdateGetFailedReasonResponse (13)
#endif

/* _Upd__UpdateGetStatusResponse has binding name '_Upd__UpdateGetStatusResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateGetStatusResponse
#define SOAP_TYPE__Upd__UpdateGetStatusResponse (12)
#endif

/* _Upd__UpdateRebootResponse has binding name '_Upd__UpdateRebootResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateRebootResponse
#define SOAP_TYPE__Upd__UpdateRebootResponse (11)
#endif

/* _Upd__UpdateRequestResponse has binding name '_Upd__UpdateRequestResponse' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateRequestResponse
#define SOAP_TYPE__Upd__UpdateRequestResponse (10)
#endif

/* _Upd__UpdateRequest has binding name '_Upd__UpdateRequest' for type '' */
#ifndef SOAP_TYPE__Upd__UpdateRequest
#define SOAP_TYPE__Upd__UpdateRequest (9)
#endif

/* Upd__UpdateProgressDef has binding name 'Upd__UpdateProgressDef' for type 'Upd:UpdateProgressDef' */
#ifndef SOAP_TYPE_Upd__UpdateProgressDef
#define SOAP_TYPE_Upd__UpdateProgressDef (8)
#endif

/* Upd__SlotVersionDef has binding name 'Upd__SlotVersionDef' for type 'Upd:SlotVersionDef' */
#ifndef SOAP_TYPE_Upd__SlotVersionDef
#define SOAP_TYPE_Upd__SlotVersionDef (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (50)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (49)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (52)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (51)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (45)
#endif

/* _Upd__UpdateRequest * has binding name 'PointerTo_Upd__UpdateRequest' for type '' */
#ifndef SOAP_TYPE_PointerTo_Upd__UpdateRequest
#define SOAP_TYPE_PointerTo_Upd__UpdateRequest (27)
#endif

/* Upd__SlotVersionDef * has binding name 'PointerToUpd__SlotVersionDef' for type 'Upd:SlotVersionDef' */
#ifndef SOAP_TYPE_PointerToUpd__SlotVersionDef
#define SOAP_TYPE_PointerToUpd__SlotVersionDef (23)
#endif

/* Upd__UpdateProgressDef * has binding name 'PointerToUpd__UpdateProgressDef' for type 'Upd:UpdateProgressDef' */
#ifndef SOAP_TYPE_PointerToUpd__UpdateProgressDef
#define SOAP_TYPE_PointerToUpd__UpdateProgressDef (22)
#endif

/* Upd__UpdateScriptDef has binding name 'Upd__UpdateScriptDef' for type 'Upd:UpdateScriptDef' */
#ifndef SOAP_TYPE_Upd__UpdateScriptDef
#define SOAP_TYPE_Upd__UpdateScriptDef (19)
#endif

/* Upd__UpdateInterfaceVersionDef has binding name 'Upd__UpdateInterfaceVersionDef' for type 'Upd:UpdateInterfaceVersionDef' */
#ifndef SOAP_TYPE_Upd__UpdateInterfaceVersionDef
#define SOAP_TYPE_Upd__UpdateInterfaceVersionDef (16)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
