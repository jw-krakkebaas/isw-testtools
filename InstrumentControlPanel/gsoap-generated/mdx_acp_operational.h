// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* mdx_acp_operational.h
   Generated by wsdl2h 2.8.122 from .\mdx_slot_update.wsdl and .\typemap.dat
   2022-06-05 01:04:52 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on mdx_acp_operational.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/mdx_slot_update.wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

Upd = "http://tempuri.org/mdx_slot_update.wsdl"

*/

#define SOAP_NAMESPACE_OF_Upd	"http://tempuri.org/mdx_slot_update.wsdl"
//gsoap Upd   schema namespace:	http://tempuri.org/mdx_slot_update.wsdl
//gsoap Upd   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class Upd__SlotVersionDef;

class Upd__UpdateProgressDef;

class _Upd__UpdateRequest;

class _Upd__UpdateRequestResponse;

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateReboot.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

class _Upd__UpdateRebootResponse;

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetStatus.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

class _Upd__UpdateGetStatusResponse;

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetFailedReason.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

class _Upd__UpdateGetFailedReasonResponse;

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetInterfaceVersion.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

class _Upd__UpdateGetInterfaceVersionResponse;

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

class _Upd__UpdateGetConfigurationResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/mdx_slot_update.wsdl                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateInterfaceVersionDef is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies the version of the slot update protocol. This version number will be encoded as "major.minor" (excluding the quotes, e.g.: 5.0).
/// </BLOCKQUOTE></PRE>
///
typedef char* Upd__UpdateInterfaceVersionDef;

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   All possible error code values that can be returned by the slot.
/// </BLOCKQUOTE></PRE>
///
/// @note The enum values are prefixed with "Upd__ErrCodeDef__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum Upd__ErrCodeDef
{
/// <PRE><BLOCKQUOTE>
///   No error detected.
/// </BLOCKQUOTE></PRE>
///
	Upd__ErrCodeDef__ERR_USCOREOK,	///< xs:string value="ERR_OK"
/// <PRE><BLOCKQUOTE>
///   A command was received in the wrong state. Command is ignored.
/// </BLOCKQUOTE></PRE>
///
	Upd__ErrCodeDef__ERR_USCOREINVALID_USCORESTATE,	///< xs:string value="ERR_INVALID_STATE"
/// <PRE><BLOCKQUOTE>
///   A critical SW or HW failure occurred.
/// </BLOCKQUOTE></PRE>
///
	Upd__ErrCodeDef__ERR_USCOREFAILED,	///< xs:string value="ERR_FAILED"
};

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateFailedReasonDef is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Values that indicate why an update failed.
/// </BLOCKQUOTE></PRE>
///
/// @note The enum values are prefixed with "Upd__UpdateFailedReasonDef__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum Upd__UpdateFailedReasonDef
{
/// <PRE><BLOCKQUOTE>
///   No failed update.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__NONE,	///< xs:string value="NONE"
/// <PRE><BLOCKQUOTE>
///   The update failed because the slot hardware configuration is not supported by the updated software.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__CONFIGURATION_USCORENOT_USCORESUPPORTED,	///< xs:string value="CONFIGURATION_NOT_SUPPORTED"
/// <PRE><BLOCKQUOTE>
///   The update script package is not found in the repository.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__UPDATE_USCORESCRIPT_USCORENOT_USCOREFOUND,	///< xs:string value="UPDATE_SCRIPT_NOT_FOUND"
/// <PRE><BLOCKQUOTE>
///   The received update script package is invalid.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__INVALID_USCOREUPDATE_USCORESCRIPT,	///< xs:string value="INVALID_UPDATE_SCRIPT"
/// <PRE><BLOCKQUOTE>
///   The update service is unable to start the instrument software.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__SOFTWARE_USCORENOT_USCORESTARTED,	///< xs:string value="SOFTWARE_NOT_STARTED"
/// <PRE><BLOCKQUOTE>
///   The update service is unable to stop the currently running instrument software.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__SOFTWARE_USCORENOT_USCORESTOPPED,	///< xs:string value="SOFTWARE_NOT_STOPPED"
/// <PRE><BLOCKQUOTE>
///   The update failed because the slot was rebooted while it was busy updating.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__UPDATE_USCOREINTERRUPTED,	///< xs:string value="UPDATE_INTERRUPTED"
/// <PRE><BLOCKQUOTE>
///   The update script did not execute successfully.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__UPDATE_USCORESCRIPT_USCOREFAILED,	///< xs:string value="UPDATE_SCRIPT_FAILED"
/// <PRE><BLOCKQUOTE>
///   An internal error has occurred during the update process.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__UPDATE_USCOREINTERNAL_USCOREERROR,	///< xs:string value="UPDATE_INTERNAL_ERROR"
/// <PRE><BLOCKQUOTE>
///   The update failed due to an undefined problem.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateFailedReasonDef__UNDEFINED,	///< xs:string value="UNDEFINED"
};

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateScriptDef is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The name of the update script installation package. The update script is described in MDx-0900714 Linux Distribution Document.
/// </BLOCKQUOTE></PRE>
///
typedef char* Upd__UpdateScriptDef;

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateStateDef is a simpleType restriction of type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The main state of the update interface of the system.
/// </BLOCKQUOTE></PRE>
///
/// @note The enum values are prefixed with "Upd__UpdateStateDef__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum Upd__UpdateStateDef
{
/// <PRE><BLOCKQUOTE>
///   The update interface is initialising, the slot update interface is becoming operational.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREINITIALISING,	///< xs:string value="UPDATE_STATE_INITIALISING"
/// <PRE><BLOCKQUOTE>
///   The update interface is idle, i.e. there are no updates busy, failed or completed.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREIDLE,	///< xs:string value="UPDATE_STATE_IDLE"
/// <PRE><BLOCKQUOTE>
///   The slot update service will shut down the ACP operational interface.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREPREPARING,	///< xs:string value="UPDATE_STATE_PREPARING"
/// <PRE><BLOCKQUOTE>
///   The slot update service is unable to prepare itself for updating the software.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREPREPARE_USCOREERROR,	///< xs:string value="UPDATE_STATE_PREPARE_ERROR"
/// <PRE><BLOCKQUOTE>
///   The slot software is busy updating.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREIN_USCOREPROGRESS,	///< xs:string value="UPDATE_STATE_IN_PROGRESS"
/// <PRE><BLOCKQUOTE>
///   Updating of the slot software was incomplete or has failed.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREREADY_USCOREERROR,	///< xs:string value="UPDATE_STATE_READY_ERROR"
/// <PRE><BLOCKQUOTE>
///   Updating of the slot software was successful. The slot must be rebooted for the ACP operational interface to become active again.
/// </BLOCKQUOTE></PRE>
///
	Upd__UpdateStateDef__UPDATE_USCORESTATE_USCOREREADY_USCOREOK,	///< xs:string value="UPDATE_STATE_READY_OK"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/mdx_slot_update.wsdl                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":SlotVersionDef is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The version of the components of a slot.
/// </BLOCKQUOTE></PRE>
///
/// @note class Upd__SlotVersionDef operations:
/// - Upd__SlotVersionDef* soap_new_Upd__SlotVersionDef(soap*) allocate and default initialize
/// - Upd__SlotVersionDef* soap_new_Upd__SlotVersionDef(soap*, int num) allocate and default initialize an array
/// - Upd__SlotVersionDef* soap_new_req_Upd__SlotVersionDef(soap*, ...) allocate, set required members
/// - Upd__SlotVersionDef* soap_new_set_Upd__SlotVersionDef(soap*, ...) allocate, set all public members
/// - Upd__SlotVersionDef::soap_default(soap*) default initialize members
/// - int soap_read_Upd__SlotVersionDef(soap*, Upd__SlotVersionDef*) deserialize from a stream
/// - int soap_write_Upd__SlotVersionDef(soap*, Upd__SlotVersionDef*) serialize to a stream
/// - Upd__SlotVersionDef* Upd__SlotVersionDef::soap_dup(soap*) returns deep copy of Upd__SlotVersionDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - Upd__SlotVersionDef::soap_del() deep deletes Upd__SlotVersionDef data members, use only after Upd__SlotVersionDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int Upd__SlotVersionDef::soap_type() returns SOAP_TYPE_Upd__SlotVersionDef or derived type identifier
class Upd__SlotVersionDef
{ public:
/// <PRE><BLOCKQUOTE>
///   The version of the Instrument Software Package (ISP).
/// </BLOCKQUOTE></PRE>
///
/// Element "IspVersion" of type xs:string.
    char*                                IspVersion                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The version of the Instrument Software (ISW).
/// </BLOCKQUOTE></PRE>
///
/// Element "IswVersion" of type xs:string.
    char*                                IswVersion                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The version of the IO board firmware (CFW).
/// </BLOCKQUOTE></PRE>
///
/// Element "CfwVersion" of type xs:string.
    char*                                CfwVersion                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The version of the detector board firmware (DFW).
/// </BLOCKQUOTE></PRE>
///
/// Element "DfwVersion" of type xs:string.
    char*                                DfwVersion                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The version of the hardware of the instrument.
/// </BLOCKQUOTE></PRE>
///
/// Element "HwVersion" of type xs:string.
    char*                                HwVersion                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateProgressDef is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The progress of the updating operation. Note that TotalSteps is greater than or equal to CurrentStep.
/// </BLOCKQUOTE></PRE>
///
/// @note class Upd__UpdateProgressDef operations:
/// - Upd__UpdateProgressDef* soap_new_Upd__UpdateProgressDef(soap*) allocate and default initialize
/// - Upd__UpdateProgressDef* soap_new_Upd__UpdateProgressDef(soap*, int num) allocate and default initialize an array
/// - Upd__UpdateProgressDef* soap_new_req_Upd__UpdateProgressDef(soap*, ...) allocate, set required members
/// - Upd__UpdateProgressDef* soap_new_set_Upd__UpdateProgressDef(soap*, ...) allocate, set all public members
/// - Upd__UpdateProgressDef::soap_default(soap*) default initialize members
/// - int soap_read_Upd__UpdateProgressDef(soap*, Upd__UpdateProgressDef*) deserialize from a stream
/// - int soap_write_Upd__UpdateProgressDef(soap*, Upd__UpdateProgressDef*) serialize to a stream
/// - Upd__UpdateProgressDef* Upd__UpdateProgressDef::soap_dup(soap*) returns deep copy of Upd__UpdateProgressDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - Upd__UpdateProgressDef::soap_del() deep deletes Upd__UpdateProgressDef data members, use only after Upd__UpdateProgressDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int Upd__UpdateProgressDef::soap_type() returns SOAP_TYPE_Upd__UpdateProgressDef or derived type identifier
class Upd__UpdateProgressDef
{ public:
/// <PRE><BLOCKQUOTE>
///   The current update step.
/// </BLOCKQUOTE></PRE>
///
/// Value range is 0 to highest.
    int                                                                
                                         CurrentStep                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The total number of update steps.
/// </BLOCKQUOTE></PRE>
///
/// Value range is 0 to highest.
    int                                                                
                                         TotalSteps                     1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateRequest
/// <PRE><BLOCKQUOTE>
///   Request to start updating the slot software by executing the update script.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateRequest is a complexType.
///
/// @note class _Upd__UpdateRequest operations:
/// - _Upd__UpdateRequest* soap_new__Upd__UpdateRequest(soap*) allocate and default initialize
/// - _Upd__UpdateRequest* soap_new__Upd__UpdateRequest(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateRequest* soap_new_req__Upd__UpdateRequest(soap*, ...) allocate, set required members
/// - _Upd__UpdateRequest* soap_new_set__Upd__UpdateRequest(soap*, ...) allocate, set all public members
/// - _Upd__UpdateRequest::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateRequest(soap*, _Upd__UpdateRequest*) deserialize from a stream
/// - int soap_write__Upd__UpdateRequest(soap*, _Upd__UpdateRequest*) serialize to a stream
/// - _Upd__UpdateRequest* _Upd__UpdateRequest::soap_dup(soap*) returns deep copy of _Upd__UpdateRequest, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateRequest::soap_del() deep deletes _Upd__UpdateRequest data members, use only after _Upd__UpdateRequest::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateRequest::soap_type() returns SOAP_TYPE__Upd__UpdateRequest or derived type identifier
class _Upd__UpdateRequest
{ public:
/// <PRE><BLOCKQUOTE>
///   The update script as described in document MDx-1100312 ISD Slot Update.
/// </BLOCKQUOTE></PRE>
///
/// Element "ScriptName" of type "http://tempuri.org/mdx_slot_update.wsdl":UpdateScriptDef.
    Upd__UpdateScriptDef                 ScriptName                     1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateRequestResponse
/// <PRE><BLOCKQUOTE>
///   Indication whether the request for an update was accepted or not.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateRequestResponse is a complexType.
///
/// @note class _Upd__UpdateRequestResponse operations:
/// - _Upd__UpdateRequestResponse* soap_new__Upd__UpdateRequestResponse(soap*) allocate and default initialize
/// - _Upd__UpdateRequestResponse* soap_new__Upd__UpdateRequestResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateRequestResponse* soap_new_req__Upd__UpdateRequestResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateRequestResponse* soap_new_set__Upd__UpdateRequestResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateRequestResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateRequestResponse(soap*, _Upd__UpdateRequestResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateRequestResponse(soap*, _Upd__UpdateRequestResponse*) serialize to a stream
/// - _Upd__UpdateRequestResponse* _Upd__UpdateRequestResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateRequestResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateRequestResponse::soap_del() deep deletes _Upd__UpdateRequestResponse data members, use only after _Upd__UpdateRequestResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateRequestResponse::soap_type() returns SOAP_TYPE__Upd__UpdateRequestResponse or derived type identifier
class _Upd__UpdateRequestResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_INVALID_STATE
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateRebootResponse
/// <PRE><BLOCKQUOTE>
///   Indication whether the request for a reboot was successful or not.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateRebootResponse is a complexType.
///
/// @note class _Upd__UpdateRebootResponse operations:
/// - _Upd__UpdateRebootResponse* soap_new__Upd__UpdateRebootResponse(soap*) allocate and default initialize
/// - _Upd__UpdateRebootResponse* soap_new__Upd__UpdateRebootResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateRebootResponse* soap_new_req__Upd__UpdateRebootResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateRebootResponse* soap_new_set__Upd__UpdateRebootResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateRebootResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateRebootResponse(soap*, _Upd__UpdateRebootResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateRebootResponse(soap*, _Upd__UpdateRebootResponse*) serialize to a stream
/// - _Upd__UpdateRebootResponse* _Upd__UpdateRebootResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateRebootResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateRebootResponse::soap_del() deep deletes _Upd__UpdateRebootResponse data members, use only after _Upd__UpdateRebootResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateRebootResponse::soap_type() returns SOAP_TYPE__Upd__UpdateRebootResponse or derived type identifier
class _Upd__UpdateRebootResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_INVALID_STATE
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetStatusResponse
/// <PRE><BLOCKQUOTE>
///   Returns the state of the slot update service.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetStatusResponse is a complexType.
///
/// @note class _Upd__UpdateGetStatusResponse operations:
/// - _Upd__UpdateGetStatusResponse* soap_new__Upd__UpdateGetStatusResponse(soap*) allocate and default initialize
/// - _Upd__UpdateGetStatusResponse* soap_new__Upd__UpdateGetStatusResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateGetStatusResponse* soap_new_req__Upd__UpdateGetStatusResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateGetStatusResponse* soap_new_set__Upd__UpdateGetStatusResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateGetStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateGetStatusResponse(soap*, _Upd__UpdateGetStatusResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateGetStatusResponse(soap*, _Upd__UpdateGetStatusResponse*) serialize to a stream
/// - _Upd__UpdateGetStatusResponse* _Upd__UpdateGetStatusResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateGetStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateGetStatusResponse::soap_del() deep deletes _Upd__UpdateGetStatusResponse data members, use only after _Upd__UpdateGetStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateGetStatusResponse::soap_type() returns SOAP_TYPE__Upd__UpdateGetStatusResponse or derived type identifier
class _Upd__UpdateGetStatusResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The state of the update interface of the slot.
/// </BLOCKQUOTE></PRE>
///
/// Element "UpdateState" of type "http://tempuri.org/mdx_slot_update.wsdl":UpdateStateDef.
    enum Upd__UpdateStateDef             UpdateState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The progress indication of the update process. Note that this is only valid when the UpdateState is UPDATE_STATE_IN_PROGRESS. In other states it will return step 0 out of a total of 0.
/// </BLOCKQUOTE></PRE>
///
/// Element "UpdateProgress" of type "http://tempuri.org/mdx_slot_update.wsdl":UpdateProgressDef.
    Upd__UpdateProgressDef*              UpdateProgress                 1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetFailedReasonResponse
/// <PRE><BLOCKQUOTE>
///   Returns the reason why an update failed.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetFailedReasonResponse is a complexType.
///
/// @note class _Upd__UpdateGetFailedReasonResponse operations:
/// - _Upd__UpdateGetFailedReasonResponse* soap_new__Upd__UpdateGetFailedReasonResponse(soap*) allocate and default initialize
/// - _Upd__UpdateGetFailedReasonResponse* soap_new__Upd__UpdateGetFailedReasonResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateGetFailedReasonResponse* soap_new_req__Upd__UpdateGetFailedReasonResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateGetFailedReasonResponse* soap_new_set__Upd__UpdateGetFailedReasonResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateGetFailedReasonResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateGetFailedReasonResponse(soap*, _Upd__UpdateGetFailedReasonResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateGetFailedReasonResponse(soap*, _Upd__UpdateGetFailedReasonResponse*) serialize to a stream
/// - _Upd__UpdateGetFailedReasonResponse* _Upd__UpdateGetFailedReasonResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateGetFailedReasonResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateGetFailedReasonResponse::soap_del() deep deletes _Upd__UpdateGetFailedReasonResponse data members, use only after _Upd__UpdateGetFailedReasonResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateGetFailedReasonResponse::soap_type() returns SOAP_TYPE__Upd__UpdateGetFailedReasonResponse or derived type identifier
class _Upd__UpdateGetFailedReasonResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_INVALID_STATE
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The reason why an update failed.
/// </BLOCKQUOTE></PRE>
///
/// Element "FailedReason" of type "http://tempuri.org/mdx_slot_update.wsdl":UpdateFailedReasonDef.
    enum Upd__UpdateFailedReasonDef      FailedReason                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetInterfaceVersionResponse
/// <PRE><BLOCKQUOTE>
///   Returns the slot update protocol version
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetInterfaceVersionResponse is a complexType.
///
/// @note class _Upd__UpdateGetInterfaceVersionResponse operations:
/// - _Upd__UpdateGetInterfaceVersionResponse* soap_new__Upd__UpdateGetInterfaceVersionResponse(soap*) allocate and default initialize
/// - _Upd__UpdateGetInterfaceVersionResponse* soap_new__Upd__UpdateGetInterfaceVersionResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateGetInterfaceVersionResponse* soap_new_req__Upd__UpdateGetInterfaceVersionResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateGetInterfaceVersionResponse* soap_new_set__Upd__UpdateGetInterfaceVersionResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateGetInterfaceVersionResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateGetInterfaceVersionResponse(soap*, _Upd__UpdateGetInterfaceVersionResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateGetInterfaceVersionResponse(soap*, _Upd__UpdateGetInterfaceVersionResponse*) serialize to a stream
/// - _Upd__UpdateGetInterfaceVersionResponse* _Upd__UpdateGetInterfaceVersionResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateGetInterfaceVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateGetInterfaceVersionResponse::soap_del() deep deletes _Upd__UpdateGetInterfaceVersionResponse data members, use only after _Upd__UpdateGetInterfaceVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateGetInterfaceVersionResponse::soap_type() returns SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse or derived type identifier
class _Upd__UpdateGetInterfaceVersionResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The version information
/// </BLOCKQUOTE></PRE>
///
/// Element "UpdateInterfaceVersion" of type "http://tempuri.org/mdx_slot_update.wsdl":UpdateInterfaceVersionDef.
    Upd__UpdateInterfaceVersionDef       UpdateInterfaceVersion         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetConfigurationResponse
/// <PRE><BLOCKQUOTE>
///   Returns the software configuration.
/// </BLOCKQUOTE></PRE>
///
/// @brief "http://tempuri.org/mdx_slot_update.wsdl":UpdateGetConfigurationResponse is a complexType.
///
/// @note class _Upd__UpdateGetConfigurationResponse operations:
/// - _Upd__UpdateGetConfigurationResponse* soap_new__Upd__UpdateGetConfigurationResponse(soap*) allocate and default initialize
/// - _Upd__UpdateGetConfigurationResponse* soap_new__Upd__UpdateGetConfigurationResponse(soap*, int num) allocate and default initialize an array
/// - _Upd__UpdateGetConfigurationResponse* soap_new_req__Upd__UpdateGetConfigurationResponse(soap*, ...) allocate, set required members
/// - _Upd__UpdateGetConfigurationResponse* soap_new_set__Upd__UpdateGetConfigurationResponse(soap*, ...) allocate, set all public members
/// - _Upd__UpdateGetConfigurationResponse::soap_default(soap*) default initialize members
/// - int soap_read__Upd__UpdateGetConfigurationResponse(soap*, _Upd__UpdateGetConfigurationResponse*) deserialize from a stream
/// - int soap_write__Upd__UpdateGetConfigurationResponse(soap*, _Upd__UpdateGetConfigurationResponse*) serialize to a stream
/// - _Upd__UpdateGetConfigurationResponse* _Upd__UpdateGetConfigurationResponse::soap_dup(soap*) returns deep copy of _Upd__UpdateGetConfigurationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _Upd__UpdateGetConfigurationResponse::soap_del() deep deletes _Upd__UpdateGetConfigurationResponse data members, use only after _Upd__UpdateGetConfigurationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _Upd__UpdateGetConfigurationResponse::soap_type() returns SOAP_TYPE__Upd__UpdateGetConfigurationResponse or derived type identifier
class _Upd__UpdateGetConfigurationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Possible Error values returned are a subset:
///   ERR_OK
///   ERR_FAILED
/// </BLOCKQUOTE></PRE>
///
/// Element "Error" of type "http://tempuri.org/mdx_slot_update.wsdl":ErrCodeDef.
    enum Upd__ErrCodeDef                 Error                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The slot software configuration (for package, software, hardware and firmware) as described in document ISD Slot Update document (BC-000178). In case a version field is empty it indicates that the version for that element is unknown.
/// </BLOCKQUOTE></PRE>
///
/// Element "SlotVersions" of type "http://tempuri.org/mdx_slot_update.wsdl":SlotVersionDef.
    Upd__SlotVersionDef*                 SlotVersions                   1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/mdx_slot_update.wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/mdx_slot_update.wsdl                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap Upd  service name:	MdxUpdateService 
//gsoap Upd  service type:	ServicePortType 
//gsoap Upd  service port:	http://MDx:8081 
//gsoap Upd  service namespace:	http://tempuri.org/mdx_slot_update.wsdl 
//gsoap Upd  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage MdxUpdateService Definitions

@section MdxUpdateService_bindings Service Bindings

  - @ref MdxUpdateService

@section MdxUpdateService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page MdxUpdateService Binding "MdxUpdateService"

@section MdxUpdateService_operations Operations of Binding "MdxUpdateService"

  - @ref __Upd__UpdateGetInterfaceVersion

  - @ref __Upd__UpdateRequest

  - @ref __Upd__UpdateReboot

  - @ref __Upd__UpdateGetStatus

  - @ref __Upd__UpdateGetFailedReason

  - @ref __Upd__UpdateGetConfiguration

@section MdxUpdateService_ports Default endpoints of Binding "MdxUpdateService"

  - http://MDx:8081


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MdxUpdateService                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateGetInterfaceVersion                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateGetInterfaceVersion" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateGetInterfaceVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                Upd__UpdateGetInterfaceVersion,
    // output parameters:
    _Upd__UpdateGetInterfaceVersionResponse&Upd__UpdateGetInterfaceVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateGetInterfaceVersion(
    struct soap *soap,
    // input parameters:
    _XML                                Upd__UpdateGetInterfaceVersion,
    // output parameters:
    _Upd__UpdateGetInterfaceVersionResponse&Upd__UpdateGetInterfaceVersionResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateGetInterfaceVersion SOAP
//gsoap Upd  service method-style:	UpdateGetInterfaceVersion document
//gsoap Upd  service method-encoding:	UpdateGetInterfaceVersion literal
//gsoap Upd  service method-action:	UpdateGetInterfaceVersion ""
//gsoap Upd  service method-output-action:	UpdateGetInterfaceVersion Response
int __Upd__UpdateGetInterfaceVersion(
    _XML                                Upd__UpdateGetInterfaceVersion,	///< Input parameter
    _Upd__UpdateGetInterfaceVersionResponse&Upd__UpdateGetInterfaceVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateRequest                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateRequest" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _Upd__UpdateRequest*                Upd__UpdateRequest,
    // output parameters:
    _Upd__UpdateRequestResponse        &Upd__UpdateRequestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateRequest(
    struct soap *soap,
    // input parameters:
    _Upd__UpdateRequest*                Upd__UpdateRequest,
    // output parameters:
    _Upd__UpdateRequestResponse        &Upd__UpdateRequestResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateRequest SOAP
//gsoap Upd  service method-style:	UpdateRequest document
//gsoap Upd  service method-encoding:	UpdateRequest literal
//gsoap Upd  service method-action:	UpdateRequest ""
//gsoap Upd  service method-output-action:	UpdateRequest Response
int __Upd__UpdateRequest(
    _Upd__UpdateRequest*                Upd__UpdateRequest,	///< Input parameter
    _Upd__UpdateRequestResponse        &Upd__UpdateRequestResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateReboot                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateReboot" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateReboot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                Upd__UpdateReboot,
    // output parameters:
    _Upd__UpdateRebootResponse         &Upd__UpdateRebootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateReboot(
    struct soap *soap,
    // input parameters:
    _XML                                Upd__UpdateReboot,
    // output parameters:
    _Upd__UpdateRebootResponse         &Upd__UpdateRebootResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateReboot SOAP
//gsoap Upd  service method-style:	UpdateReboot document
//gsoap Upd  service method-encoding:	UpdateReboot literal
//gsoap Upd  service method-action:	UpdateReboot ""
//gsoap Upd  service method-output-action:	UpdateReboot Response
int __Upd__UpdateReboot(
    _XML                                Upd__UpdateReboot,	///< Input parameter
    _Upd__UpdateRebootResponse         &Upd__UpdateRebootResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateGetStatus                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateGetStatus" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateGetStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                Upd__UpdateGetStatus,
    // output parameters:
    _Upd__UpdateGetStatusResponse      &Upd__UpdateGetStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateGetStatus(
    struct soap *soap,
    // input parameters:
    _XML                                Upd__UpdateGetStatus,
    // output parameters:
    _Upd__UpdateGetStatusResponse      &Upd__UpdateGetStatusResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateGetStatus SOAP
//gsoap Upd  service method-style:	UpdateGetStatus document
//gsoap Upd  service method-encoding:	UpdateGetStatus literal
//gsoap Upd  service method-action:	UpdateGetStatus ""
//gsoap Upd  service method-output-action:	UpdateGetStatus Response
int __Upd__UpdateGetStatus(
    _XML                                Upd__UpdateGetStatus,	///< Input parameter
    _Upd__UpdateGetStatusResponse      &Upd__UpdateGetStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateGetFailedReason                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateGetFailedReason" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateGetFailedReason(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                Upd__UpdateGetFailedReason,
    // output parameters:
    _Upd__UpdateGetFailedReasonResponse&Upd__UpdateGetFailedReasonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateGetFailedReason(
    struct soap *soap,
    // input parameters:
    _XML                                Upd__UpdateGetFailedReason,
    // output parameters:
    _Upd__UpdateGetFailedReasonResponse&Upd__UpdateGetFailedReasonResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateGetFailedReason SOAP
//gsoap Upd  service method-style:	UpdateGetFailedReason document
//gsoap Upd  service method-encoding:	UpdateGetFailedReason literal
//gsoap Upd  service method-action:	UpdateGetFailedReason ""
//gsoap Upd  service method-output-action:	UpdateGetFailedReason Response
int __Upd__UpdateGetFailedReason(
    _XML                                Upd__UpdateGetFailedReason,	///< Input parameter
    _Upd__UpdateGetFailedReasonResponse&Upd__UpdateGetFailedReasonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __Upd__UpdateGetConfiguration                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__Upd__UpdateGetConfiguration" of service binding "MdxUpdateService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://MDx:8081

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___Upd__UpdateGetConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _XML                                Upd__UpdateGetConfiguration,
    // output parameters:
    _Upd__UpdateGetConfigurationResponse&Upd__UpdateGetConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __Upd__UpdateGetConfiguration(
    struct soap *soap,
    // input parameters:
    _XML                                Upd__UpdateGetConfiguration,
    // output parameters:
    _Upd__UpdateGetConfigurationResponse&Upd__UpdateGetConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapMdxUpdateServiceProxy.h generated with soapcpp2):
@code
  class MdxUpdateServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMdxUpdateServiceService.h generated with soapcpp2):
@code
  class MdxUpdateServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap Upd  service method-protocol:	UpdateGetConfiguration SOAP
//gsoap Upd  service method-style:	UpdateGetConfiguration document
//gsoap Upd  service method-encoding:	UpdateGetConfiguration literal
//gsoap Upd  service method-action:	UpdateGetConfiguration ""
//gsoap Upd  service method-output-action:	UpdateGetConfiguration Response
int __Upd__UpdateGetConfiguration(
    _XML                                Upd__UpdateGetConfiguration,	///< Input parameter
    _Upd__UpdateGetConfigurationResponse&Upd__UpdateGetConfigurationResponse	///< Output parameter
);

/** @page MdxUpdateService Binding "MdxUpdateService"

@section MdxUpdateService_policy_enablers Policy Enablers of Binding "MdxUpdateService"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section Upd Top-level root elements of schema "http://tempuri.org/mdx_slot_update.wsdl"

  - <Upd:UpdateRequest> @ref _Upd__UpdateRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateRequest(struct soap*, const char *URL, _Upd__UpdateRequest*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateRequest(struct soap*, const char *URL, _Upd__UpdateRequest*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateRequest(struct soap*, const char *URL, _Upd__UpdateRequest*);
    soap_POST_recv__Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest*);
    @endcode

  - <Upd:UpdateRequestResponse> @ref _Upd__UpdateRequestResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateRequestResponse(struct soap*, _Upd__UpdateRequestResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateRequestResponse(struct soap*, _Upd__UpdateRequestResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateRequestResponse(struct soap*, const char *URL, _Upd__UpdateRequestResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateRequestResponse(struct soap*, const char *URL, _Upd__UpdateRequestResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateRequestResponse(struct soap*, const char *URL, _Upd__UpdateRequestResponse*);
    soap_POST_recv__Upd__UpdateRequestResponse(struct soap*, _Upd__UpdateRequestResponse*);
    @endcode

  - <Upd:UpdateReboot> @ref _Upd__UpdateReboot
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateReboot(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateReboot(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateReboot(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateReboot(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateReboot(struct soap*, const char *URL, _XML);
    soap_POST_recv__Upd__UpdateReboot(struct soap*, _XML);
    @endcode

  - <Upd:UpdateRebootResponse> @ref _Upd__UpdateRebootResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateRebootResponse(struct soap*, _Upd__UpdateRebootResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateRebootResponse(struct soap*, _Upd__UpdateRebootResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateRebootResponse(struct soap*, const char *URL, _Upd__UpdateRebootResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateRebootResponse(struct soap*, const char *URL, _Upd__UpdateRebootResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateRebootResponse(struct soap*, const char *URL, _Upd__UpdateRebootResponse*);
    soap_POST_recv__Upd__UpdateRebootResponse(struct soap*, _Upd__UpdateRebootResponse*);
    @endcode

  - <Upd:UpdateGetStatus> @ref _Upd__UpdateGetStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetStatus(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetStatus(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetStatus(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetStatus(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetStatus(struct soap*, const char *URL, _XML);
    soap_POST_recv__Upd__UpdateGetStatus(struct soap*, _XML);
    @endcode

  - <Upd:UpdateGetStatusResponse> @ref _Upd__UpdateGetStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetStatusResponse(struct soap*, _Upd__UpdateGetStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetStatusResponse(struct soap*, _Upd__UpdateGetStatusResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetStatusResponse(struct soap*, const char *URL, _Upd__UpdateGetStatusResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetStatusResponse(struct soap*, const char *URL, _Upd__UpdateGetStatusResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetStatusResponse(struct soap*, const char *URL, _Upd__UpdateGetStatusResponse*);
    soap_POST_recv__Upd__UpdateGetStatusResponse(struct soap*, _Upd__UpdateGetStatusResponse*);
    @endcode

  - <Upd:UpdateGetFailedReason> @ref _Upd__UpdateGetFailedReason
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetFailedReason(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetFailedReason(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetFailedReason(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetFailedReason(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetFailedReason(struct soap*, const char *URL, _XML);
    soap_POST_recv__Upd__UpdateGetFailedReason(struct soap*, _XML);
    @endcode

  - <Upd:UpdateGetFailedReasonResponse> @ref _Upd__UpdateGetFailedReasonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetFailedReasonResponse(struct soap*, _Upd__UpdateGetFailedReasonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetFailedReasonResponse(struct soap*, _Upd__UpdateGetFailedReasonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetFailedReasonResponse(struct soap*, const char *URL, _Upd__UpdateGetFailedReasonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetFailedReasonResponse(struct soap*, const char *URL, _Upd__UpdateGetFailedReasonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetFailedReasonResponse(struct soap*, const char *URL, _Upd__UpdateGetFailedReasonResponse*);
    soap_POST_recv__Upd__UpdateGetFailedReasonResponse(struct soap*, _Upd__UpdateGetFailedReasonResponse*);
    @endcode

  - <Upd:UpdateGetInterfaceVersion> @ref _Upd__UpdateGetInterfaceVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetInterfaceVersion(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetInterfaceVersion(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetInterfaceVersion(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetInterfaceVersion(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetInterfaceVersion(struct soap*, const char *URL, _XML);
    soap_POST_recv__Upd__UpdateGetInterfaceVersion(struct soap*, _XML);
    @endcode

  - <Upd:UpdateGetInterfaceVersionResponse> @ref _Upd__UpdateGetInterfaceVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetInterfaceVersionResponse(struct soap*, _Upd__UpdateGetInterfaceVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetInterfaceVersionResponse(struct soap*, _Upd__UpdateGetInterfaceVersionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetInterfaceVersionResponse(struct soap*, const char *URL, _Upd__UpdateGetInterfaceVersionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetInterfaceVersionResponse(struct soap*, const char *URL, _Upd__UpdateGetInterfaceVersionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetInterfaceVersionResponse(struct soap*, const char *URL, _Upd__UpdateGetInterfaceVersionResponse*);
    soap_POST_recv__Upd__UpdateGetInterfaceVersionResponse(struct soap*, _Upd__UpdateGetInterfaceVersionResponse*);
    @endcode

  - <Upd:UpdateGetConfiguration> @ref _Upd__UpdateGetConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetConfiguration(struct soap*, _XML);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetConfiguration(struct soap*, _XML);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetConfiguration(struct soap*, const char *URL, _XML);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetConfiguration(struct soap*, const char *URL, _XML);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetConfiguration(struct soap*, const char *URL, _XML);
    soap_POST_recv__Upd__UpdateGetConfiguration(struct soap*, _XML);
    @endcode

  - <Upd:UpdateGetConfigurationResponse> @ref _Upd__UpdateGetConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__Upd__UpdateGetConfigurationResponse(struct soap*, _Upd__UpdateGetConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__Upd__UpdateGetConfigurationResponse(struct soap*, _Upd__UpdateGetConfigurationResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__Upd__UpdateGetConfigurationResponse(struct soap*, const char *URL, _Upd__UpdateGetConfigurationResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__Upd__UpdateGetConfigurationResponse(struct soap*, const char *URL, _Upd__UpdateGetConfigurationResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__Upd__UpdateGetConfigurationResponse(struct soap*, const char *URL, _Upd__UpdateGetConfigurationResponse*);
    soap_POST_recv__Upd__UpdateGetConfigurationResponse(struct soap*, _Upd__UpdateGetConfigurationResponse*);
    @endcode

*/

/* End of mdx_acp_operational.h */
