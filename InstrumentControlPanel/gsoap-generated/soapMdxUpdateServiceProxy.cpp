/* soapMdxUpdateServiceProxy.cpp
   Generated by gSOAP 2.8.122 for mdx_acp_operational.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMdxUpdateServiceProxy.h"

MdxUpdateServiceProxy::MdxUpdateServiceProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	MdxUpdateServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(const MdxUpdateServiceProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	MdxUpdateServiceProxy_init(_soap->imode, _soap->omode);
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	MdxUpdateServiceProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	MdxUpdateServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	MdxUpdateServiceProxy_init(iomode, iomode);
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	MdxUpdateServiceProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

MdxUpdateServiceProxy::MdxUpdateServiceProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	MdxUpdateServiceProxy_init(imode, omode);
}

MdxUpdateServiceProxy::~MdxUpdateServiceProxy()
{	if (this->soap_own)
	{	MdxUpdateServiceProxy::destroy();
		soap_free(this->soap);
	}
}

void MdxUpdateServiceProxy::MdxUpdateServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "Upd", "http://tempuri.org/mdx_slot_update.wsdl", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

MdxUpdateServiceProxy *MdxUpdateServiceProxy::copy()
{	MdxUpdateServiceProxy *dup = SOAP_NEW_UNMANAGED(MdxUpdateServiceProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

MdxUpdateServiceProxy& MdxUpdateServiceProxy::operator=(const MdxUpdateServiceProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void MdxUpdateServiceProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void MdxUpdateServiceProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	MdxUpdateServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void MdxUpdateServiceProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *MdxUpdateServiceProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *MdxUpdateServiceProxy::soap_fault()
{	return this->soap->fault;
}

const char *MdxUpdateServiceProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *MdxUpdateServiceProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *MdxUpdateServiceProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int MdxUpdateServiceProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int MdxUpdateServiceProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void MdxUpdateServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void MdxUpdateServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *MdxUpdateServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int MdxUpdateServiceProxy::send_UpdateGetInterfaceVersion(const char *soap_endpoint_url, const char *soap_action, char *Upd__UpdateGetInterfaceVersion)
{
	struct __Upd__UpdateGetInterfaceVersion soap_tmp___Upd__UpdateGetInterfaceVersion;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateGetInterfaceVersion.Upd__UpdateGetInterfaceVersion = Upd__UpdateGetInterfaceVersion;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateGetInterfaceVersion(soap, &soap_tmp___Upd__UpdateGetInterfaceVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateGetInterfaceVersion(soap, &soap_tmp___Upd__UpdateGetInterfaceVersion, "-Upd:UpdateGetInterfaceVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateGetInterfaceVersion(soap, &soap_tmp___Upd__UpdateGetInterfaceVersion, "-Upd:UpdateGetInterfaceVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateGetInterfaceVersion(_Upd__UpdateGetInterfaceVersionResponse &Upd__UpdateGetInterfaceVersionResponse)
{
	Upd__UpdateGetInterfaceVersionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateGetInterfaceVersionResponse.soap_get(soap, "Upd:UpdateGetInterfaceVersionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MdxUpdateServiceProxy::send_UpdateRequest(const char *soap_endpoint_url, const char *soap_action, _Upd__UpdateRequest *Upd__UpdateRequest)
{
	struct __Upd__UpdateRequest soap_tmp___Upd__UpdateRequest;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateRequest.Upd__UpdateRequest = Upd__UpdateRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateRequest(soap, &soap_tmp___Upd__UpdateRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateRequest(soap, &soap_tmp___Upd__UpdateRequest, "-Upd:UpdateRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateRequest(soap, &soap_tmp___Upd__UpdateRequest, "-Upd:UpdateRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateRequest(_Upd__UpdateRequestResponse &Upd__UpdateRequestResponse)
{
	Upd__UpdateRequestResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateRequestResponse.soap_get(soap, "Upd:UpdateRequestResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MdxUpdateServiceProxy::send_UpdateReboot(const char *soap_endpoint_url, const char *soap_action, char *Upd__UpdateReboot)
{
	struct __Upd__UpdateReboot soap_tmp___Upd__UpdateReboot;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateReboot.Upd__UpdateReboot = Upd__UpdateReboot;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateReboot(soap, &soap_tmp___Upd__UpdateReboot);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateReboot(soap, &soap_tmp___Upd__UpdateReboot, "-Upd:UpdateReboot", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateReboot(soap, &soap_tmp___Upd__UpdateReboot, "-Upd:UpdateReboot", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateReboot(_Upd__UpdateRebootResponse &Upd__UpdateRebootResponse)
{
	Upd__UpdateRebootResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateRebootResponse.soap_get(soap, "Upd:UpdateRebootResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MdxUpdateServiceProxy::send_UpdateGetStatus(const char *soap_endpoint_url, const char *soap_action, char *Upd__UpdateGetStatus)
{
	struct __Upd__UpdateGetStatus soap_tmp___Upd__UpdateGetStatus;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateGetStatus.Upd__UpdateGetStatus = Upd__UpdateGetStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateGetStatus(soap, &soap_tmp___Upd__UpdateGetStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateGetStatus(soap, &soap_tmp___Upd__UpdateGetStatus, "-Upd:UpdateGetStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateGetStatus(soap, &soap_tmp___Upd__UpdateGetStatus, "-Upd:UpdateGetStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateGetStatus(_Upd__UpdateGetStatusResponse &Upd__UpdateGetStatusResponse)
{
	Upd__UpdateGetStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateGetStatusResponse.soap_get(soap, "Upd:UpdateGetStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MdxUpdateServiceProxy::send_UpdateGetFailedReason(const char *soap_endpoint_url, const char *soap_action, char *Upd__UpdateGetFailedReason)
{
	struct __Upd__UpdateGetFailedReason soap_tmp___Upd__UpdateGetFailedReason;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateGetFailedReason.Upd__UpdateGetFailedReason = Upd__UpdateGetFailedReason;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateGetFailedReason(soap, &soap_tmp___Upd__UpdateGetFailedReason);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateGetFailedReason(soap, &soap_tmp___Upd__UpdateGetFailedReason, "-Upd:UpdateGetFailedReason", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateGetFailedReason(soap, &soap_tmp___Upd__UpdateGetFailedReason, "-Upd:UpdateGetFailedReason", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateGetFailedReason(_Upd__UpdateGetFailedReasonResponse &Upd__UpdateGetFailedReasonResponse)
{
	Upd__UpdateGetFailedReasonResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateGetFailedReasonResponse.soap_get(soap, "Upd:UpdateGetFailedReasonResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MdxUpdateServiceProxy::send_UpdateGetConfiguration(const char *soap_endpoint_url, const char *soap_action, char *Upd__UpdateGetConfiguration)
{
	struct __Upd__UpdateGetConfiguration soap_tmp___Upd__UpdateGetConfiguration;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://MDx:8081";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___Upd__UpdateGetConfiguration.Upd__UpdateGetConfiguration = Upd__UpdateGetConfiguration;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___Upd__UpdateGetConfiguration(soap, &soap_tmp___Upd__UpdateGetConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Upd__UpdateGetConfiguration(soap, &soap_tmp___Upd__UpdateGetConfiguration, "-Upd:UpdateGetConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Upd__UpdateGetConfiguration(soap, &soap_tmp___Upd__UpdateGetConfiguration, "-Upd:UpdateGetConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int MdxUpdateServiceProxy::recv_UpdateGetConfiguration(_Upd__UpdateGetConfigurationResponse &Upd__UpdateGetConfigurationResponse)
{
	Upd__UpdateGetConfigurationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Upd__UpdateGetConfigurationResponse.soap_get(soap, "Upd:UpdateGetConfigurationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
