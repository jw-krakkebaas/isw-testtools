/* soapH.h
   Generated by gSOAP 2.8.122 for mdx_acp_operational.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__UpdateStateDef_DEFINED
#define SOAP_TYPE_Upd__UpdateStateDef_DEFINED

inline void soap_default_Upd__UpdateStateDef(struct soap *soap, enum Upd__UpdateStateDef *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Upd__UpdateStateDef
	*a = SOAP_DEFAULT_Upd__UpdateStateDef;
#else
	*a = (enum Upd__UpdateStateDef)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__UpdateStateDef(struct soap*, const char*, int, const enum Upd__UpdateStateDef *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_Upd__UpdateStateDef2s(struct soap*, enum Upd__UpdateStateDef);
SOAP_FMAC3 enum Upd__UpdateStateDef * SOAP_FMAC4 soap_in_Upd__UpdateStateDef(struct soap*, const char*, enum Upd__UpdateStateDef *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2Upd__UpdateStateDef(struct soap*, const char*, enum Upd__UpdateStateDef *);

SOAP_FMAC3 enum Upd__UpdateStateDef * SOAP_FMAC4 soap_new_Upd__UpdateStateDef(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Upd__UpdateStateDef(struct soap*, const enum Upd__UpdateStateDef *, const char*, const char*);

inline int soap_write_Upd__UpdateStateDef(struct soap *soap, enum Upd__UpdateStateDef const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_Upd__UpdateStateDef(soap, p, "Upd:UpdateStateDef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_Upd__UpdateStateDef(struct soap *soap, const char *URL, enum Upd__UpdateStateDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateStateDef(soap, p, "Upd:UpdateStateDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__UpdateStateDef(struct soap *soap, const char *URL, enum Upd__UpdateStateDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateStateDef(soap, p, "Upd:UpdateStateDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__UpdateStateDef(struct soap *soap, const char *URL, enum Upd__UpdateStateDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateStateDef(soap, p, "Upd:UpdateStateDef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum Upd__UpdateStateDef * SOAP_FMAC4 soap_get_Upd__UpdateStateDef(struct soap*, enum Upd__UpdateStateDef *, const char*, const char*);

inline int soap_read_Upd__UpdateStateDef(struct soap *soap, enum Upd__UpdateStateDef *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_Upd__UpdateStateDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__UpdateStateDef(struct soap *soap, const char *URL, enum Upd__UpdateStateDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__UpdateStateDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__UpdateStateDef(struct soap *soap, enum Upd__UpdateStateDef *p)
{
	if (::soap_read_Upd__UpdateStateDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__UpdateFailedReasonDef_DEFINED
#define SOAP_TYPE_Upd__UpdateFailedReasonDef_DEFINED

inline void soap_default_Upd__UpdateFailedReasonDef(struct soap *soap, enum Upd__UpdateFailedReasonDef *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Upd__UpdateFailedReasonDef
	*a = SOAP_DEFAULT_Upd__UpdateFailedReasonDef;
#else
	*a = (enum Upd__UpdateFailedReasonDef)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__UpdateFailedReasonDef(struct soap*, const char*, int, const enum Upd__UpdateFailedReasonDef *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_Upd__UpdateFailedReasonDef2s(struct soap*, enum Upd__UpdateFailedReasonDef);
SOAP_FMAC3 enum Upd__UpdateFailedReasonDef * SOAP_FMAC4 soap_in_Upd__UpdateFailedReasonDef(struct soap*, const char*, enum Upd__UpdateFailedReasonDef *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2Upd__UpdateFailedReasonDef(struct soap*, const char*, enum Upd__UpdateFailedReasonDef *);

SOAP_FMAC3 enum Upd__UpdateFailedReasonDef * SOAP_FMAC4 soap_new_Upd__UpdateFailedReasonDef(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Upd__UpdateFailedReasonDef(struct soap*, const enum Upd__UpdateFailedReasonDef *, const char*, const char*);

inline int soap_write_Upd__UpdateFailedReasonDef(struct soap *soap, enum Upd__UpdateFailedReasonDef const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_Upd__UpdateFailedReasonDef(soap, p, "Upd:UpdateFailedReasonDef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_Upd__UpdateFailedReasonDef(struct soap *soap, const char *URL, enum Upd__UpdateFailedReasonDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateFailedReasonDef(soap, p, "Upd:UpdateFailedReasonDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__UpdateFailedReasonDef(struct soap *soap, const char *URL, enum Upd__UpdateFailedReasonDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateFailedReasonDef(soap, p, "Upd:UpdateFailedReasonDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__UpdateFailedReasonDef(struct soap *soap, const char *URL, enum Upd__UpdateFailedReasonDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateFailedReasonDef(soap, p, "Upd:UpdateFailedReasonDef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum Upd__UpdateFailedReasonDef * SOAP_FMAC4 soap_get_Upd__UpdateFailedReasonDef(struct soap*, enum Upd__UpdateFailedReasonDef *, const char*, const char*);

inline int soap_read_Upd__UpdateFailedReasonDef(struct soap *soap, enum Upd__UpdateFailedReasonDef *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_Upd__UpdateFailedReasonDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__UpdateFailedReasonDef(struct soap *soap, const char *URL, enum Upd__UpdateFailedReasonDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__UpdateFailedReasonDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__UpdateFailedReasonDef(struct soap *soap, enum Upd__UpdateFailedReasonDef *p)
{
	if (::soap_read_Upd__UpdateFailedReasonDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__ErrCodeDef_DEFINED
#define SOAP_TYPE_Upd__ErrCodeDef_DEFINED

inline void soap_default_Upd__ErrCodeDef(struct soap *soap, enum Upd__ErrCodeDef *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Upd__ErrCodeDef
	*a = SOAP_DEFAULT_Upd__ErrCodeDef;
#else
	*a = (enum Upd__ErrCodeDef)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__ErrCodeDef(struct soap*, const char*, int, const enum Upd__ErrCodeDef *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_Upd__ErrCodeDef2s(struct soap*, enum Upd__ErrCodeDef);
SOAP_FMAC3 enum Upd__ErrCodeDef * SOAP_FMAC4 soap_in_Upd__ErrCodeDef(struct soap*, const char*, enum Upd__ErrCodeDef *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2Upd__ErrCodeDef(struct soap*, const char*, enum Upd__ErrCodeDef *);

SOAP_FMAC3 enum Upd__ErrCodeDef * SOAP_FMAC4 soap_new_Upd__ErrCodeDef(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Upd__ErrCodeDef(struct soap*, const enum Upd__ErrCodeDef *, const char*, const char*);

inline int soap_write_Upd__ErrCodeDef(struct soap *soap, enum Upd__ErrCodeDef const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_Upd__ErrCodeDef(soap, p, "Upd:ErrCodeDef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_Upd__ErrCodeDef(struct soap *soap, const char *URL, enum Upd__ErrCodeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__ErrCodeDef(soap, p, "Upd:ErrCodeDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__ErrCodeDef(struct soap *soap, const char *URL, enum Upd__ErrCodeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__ErrCodeDef(soap, p, "Upd:ErrCodeDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__ErrCodeDef(struct soap *soap, const char *URL, enum Upd__ErrCodeDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__ErrCodeDef(soap, p, "Upd:ErrCodeDef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum Upd__ErrCodeDef * SOAP_FMAC4 soap_get_Upd__ErrCodeDef(struct soap*, enum Upd__ErrCodeDef *, const char*, const char*);

inline int soap_read_Upd__ErrCodeDef(struct soap *soap, enum Upd__ErrCodeDef *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_Upd__ErrCodeDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__ErrCodeDef(struct soap *soap, const char *URL, enum Upd__ErrCodeDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__ErrCodeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__ErrCodeDef(struct soap *soap, enum Upd__ErrCodeDef *p)
{
	if (::soap_read_Upd__ErrCodeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateGetConfigurationResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateGetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateGetConfigurationResponse(struct soap*, const char*, int, const _Upd__UpdateGetConfigurationResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateGetConfigurationResponse * SOAP_FMAC4 soap_in__Upd__UpdateGetConfigurationResponse(struct soap*, const char*, _Upd__UpdateGetConfigurationResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateGetConfigurationResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateGetConfigurationResponse * soap_new__Upd__UpdateGetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateGetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateGetConfigurationResponse * soap_new_req__Upd__UpdateGetConfigurationResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	Upd__SlotVersionDef *SlotVersions)
{
	_Upd__UpdateGetConfigurationResponse *_p = ::soap_new__Upd__UpdateGetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetConfigurationResponse::Error = Error;
		_p->_Upd__UpdateGetConfigurationResponse::SlotVersions = SlotVersions;
	}
	return _p;
}

inline _Upd__UpdateGetConfigurationResponse * soap_new_set__Upd__UpdateGetConfigurationResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	Upd__SlotVersionDef *SlotVersions)
{
	_Upd__UpdateGetConfigurationResponse *_p = ::soap_new__Upd__UpdateGetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetConfigurationResponse::Error = Error;
		_p->_Upd__UpdateGetConfigurationResponse::SlotVersions = SlotVersions;
	}
	return _p;
}

inline int soap_write__Upd__UpdateGetConfigurationResponse(struct soap *soap, _Upd__UpdateGetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetConfigurationResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateGetConfigurationResponse(struct soap *soap, const char *URL, _Upd__UpdateGetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetConfigurationResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateGetConfigurationResponse(struct soap *soap, const char *URL, _Upd__UpdateGetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetConfigurationResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateGetConfigurationResponse(struct soap *soap, const char *URL, _Upd__UpdateGetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetConfigurationResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateGetConfigurationResponse * SOAP_FMAC4 soap_get__Upd__UpdateGetConfigurationResponse(struct soap*, _Upd__UpdateGetConfigurationResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateGetConfigurationResponse(struct soap *soap, _Upd__UpdateGetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateGetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateGetConfigurationResponse(struct soap *soap, const char *URL, _Upd__UpdateGetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateGetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateGetConfigurationResponse(struct soap *soap, _Upd__UpdateGetConfigurationResponse *p)
{
	if (::soap_read__Upd__UpdateGetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateGetInterfaceVersionResponse(struct soap*, const char*, int, const _Upd__UpdateGetInterfaceVersionResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateGetInterfaceVersionResponse * SOAP_FMAC4 soap_in__Upd__UpdateGetInterfaceVersionResponse(struct soap*, const char*, _Upd__UpdateGetInterfaceVersionResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateGetInterfaceVersionResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetInterfaceVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateGetInterfaceVersionResponse * soap_new__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateGetInterfaceVersionResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateGetInterfaceVersionResponse * soap_new_req__Upd__UpdateGetInterfaceVersionResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	char *UpdateInterfaceVersion)
{
	_Upd__UpdateGetInterfaceVersionResponse *_p = ::soap_new__Upd__UpdateGetInterfaceVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetInterfaceVersionResponse::Error = Error;
		_p->_Upd__UpdateGetInterfaceVersionResponse::UpdateInterfaceVersion = UpdateInterfaceVersion;
	}
	return _p;
}

inline _Upd__UpdateGetInterfaceVersionResponse * soap_new_set__Upd__UpdateGetInterfaceVersionResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	char *UpdateInterfaceVersion)
{
	_Upd__UpdateGetInterfaceVersionResponse *_p = ::soap_new__Upd__UpdateGetInterfaceVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetInterfaceVersionResponse::Error = Error;
		_p->_Upd__UpdateGetInterfaceVersionResponse::UpdateInterfaceVersion = UpdateInterfaceVersion;
	}
	return _p;
}

inline int soap_write__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, _Upd__UpdateGetInterfaceVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetInterfaceVersionResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, const char *URL, _Upd__UpdateGetInterfaceVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetInterfaceVersionResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, const char *URL, _Upd__UpdateGetInterfaceVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetInterfaceVersionResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, const char *URL, _Upd__UpdateGetInterfaceVersionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetInterfaceVersionResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetInterfaceVersionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateGetInterfaceVersionResponse * SOAP_FMAC4 soap_get__Upd__UpdateGetInterfaceVersionResponse(struct soap*, _Upd__UpdateGetInterfaceVersionResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, _Upd__UpdateGetInterfaceVersionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateGetInterfaceVersionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, const char *URL, _Upd__UpdateGetInterfaceVersionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateGetInterfaceVersionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateGetInterfaceVersionResponse(struct soap *soap, _Upd__UpdateGetInterfaceVersionResponse *p)
{
	if (::soap_read__Upd__UpdateGetInterfaceVersionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateGetFailedReasonResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateGetFailedReasonResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateGetFailedReasonResponse(struct soap*, const char*, int, const _Upd__UpdateGetFailedReasonResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateGetFailedReasonResponse * SOAP_FMAC4 soap_in__Upd__UpdateGetFailedReasonResponse(struct soap*, const char*, _Upd__UpdateGetFailedReasonResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateGetFailedReasonResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetFailedReasonResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateGetFailedReasonResponse * soap_new__Upd__UpdateGetFailedReasonResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateGetFailedReasonResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateGetFailedReasonResponse * soap_new_req__Upd__UpdateGetFailedReasonResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	enum Upd__UpdateFailedReasonDef FailedReason)
{
	_Upd__UpdateGetFailedReasonResponse *_p = ::soap_new__Upd__UpdateGetFailedReasonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetFailedReasonResponse::Error = Error;
		_p->_Upd__UpdateGetFailedReasonResponse::FailedReason = FailedReason;
	}
	return _p;
}

inline _Upd__UpdateGetFailedReasonResponse * soap_new_set__Upd__UpdateGetFailedReasonResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	enum Upd__UpdateFailedReasonDef FailedReason)
{
	_Upd__UpdateGetFailedReasonResponse *_p = ::soap_new__Upd__UpdateGetFailedReasonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetFailedReasonResponse::Error = Error;
		_p->_Upd__UpdateGetFailedReasonResponse::FailedReason = FailedReason;
	}
	return _p;
}

inline int soap_write__Upd__UpdateGetFailedReasonResponse(struct soap *soap, _Upd__UpdateGetFailedReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetFailedReasonResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetFailedReasonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateGetFailedReasonResponse(struct soap *soap, const char *URL, _Upd__UpdateGetFailedReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetFailedReasonResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetFailedReasonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateGetFailedReasonResponse(struct soap *soap, const char *URL, _Upd__UpdateGetFailedReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetFailedReasonResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetFailedReasonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateGetFailedReasonResponse(struct soap *soap, const char *URL, _Upd__UpdateGetFailedReasonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetFailedReasonResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetFailedReasonResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateGetFailedReasonResponse * SOAP_FMAC4 soap_get__Upd__UpdateGetFailedReasonResponse(struct soap*, _Upd__UpdateGetFailedReasonResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateGetFailedReasonResponse(struct soap *soap, _Upd__UpdateGetFailedReasonResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateGetFailedReasonResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateGetFailedReasonResponse(struct soap *soap, const char *URL, _Upd__UpdateGetFailedReasonResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateGetFailedReasonResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateGetFailedReasonResponse(struct soap *soap, _Upd__UpdateGetFailedReasonResponse *p)
{
	if (::soap_read__Upd__UpdateGetFailedReasonResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateGetStatusResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateGetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateGetStatusResponse(struct soap*, const char*, int, const _Upd__UpdateGetStatusResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateGetStatusResponse * SOAP_FMAC4 soap_in__Upd__UpdateGetStatusResponse(struct soap*, const char*, _Upd__UpdateGetStatusResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateGetStatusResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateGetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateGetStatusResponse * soap_new__Upd__UpdateGetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateGetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateGetStatusResponse * soap_new_req__Upd__UpdateGetStatusResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	enum Upd__UpdateStateDef UpdateState,
	Upd__UpdateProgressDef *UpdateProgress)
{
	_Upd__UpdateGetStatusResponse *_p = ::soap_new__Upd__UpdateGetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetStatusResponse::Error = Error;
		_p->_Upd__UpdateGetStatusResponse::UpdateState = UpdateState;
		_p->_Upd__UpdateGetStatusResponse::UpdateProgress = UpdateProgress;
	}
	return _p;
}

inline _Upd__UpdateGetStatusResponse * soap_new_set__Upd__UpdateGetStatusResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error,
	enum Upd__UpdateStateDef UpdateState,
	Upd__UpdateProgressDef *UpdateProgress)
{
	_Upd__UpdateGetStatusResponse *_p = ::soap_new__Upd__UpdateGetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateGetStatusResponse::Error = Error;
		_p->_Upd__UpdateGetStatusResponse::UpdateState = UpdateState;
		_p->_Upd__UpdateGetStatusResponse::UpdateProgress = UpdateProgress;
	}
	return _p;
}

inline int soap_write__Upd__UpdateGetStatusResponse(struct soap *soap, _Upd__UpdateGetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetStatusResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateGetStatusResponse(struct soap *soap, const char *URL, _Upd__UpdateGetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetStatusResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateGetStatusResponse(struct soap *soap, const char *URL, _Upd__UpdateGetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetStatusResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateGetStatusResponse(struct soap *soap, const char *URL, _Upd__UpdateGetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateGetStatusResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateGetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateGetStatusResponse * SOAP_FMAC4 soap_get__Upd__UpdateGetStatusResponse(struct soap*, _Upd__UpdateGetStatusResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateGetStatusResponse(struct soap *soap, _Upd__UpdateGetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateGetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateGetStatusResponse(struct soap *soap, const char *URL, _Upd__UpdateGetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateGetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateGetStatusResponse(struct soap *soap, _Upd__UpdateGetStatusResponse *p)
{
	if (::soap_read__Upd__UpdateGetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateRebootResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateRebootResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateRebootResponse(struct soap*, const char*, int, const _Upd__UpdateRebootResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateRebootResponse * SOAP_FMAC4 soap_in__Upd__UpdateRebootResponse(struct soap*, const char*, _Upd__UpdateRebootResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateRebootResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateRebootResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateRebootResponse * soap_new__Upd__UpdateRebootResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateRebootResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateRebootResponse * soap_new_req__Upd__UpdateRebootResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error)
{
	_Upd__UpdateRebootResponse *_p = ::soap_new__Upd__UpdateRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRebootResponse::Error = Error;
	}
	return _p;
}

inline _Upd__UpdateRebootResponse * soap_new_set__Upd__UpdateRebootResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error)
{
	_Upd__UpdateRebootResponse *_p = ::soap_new__Upd__UpdateRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRebootResponse::Error = Error;
	}
	return _p;
}

inline int soap_write__Upd__UpdateRebootResponse(struct soap *soap, _Upd__UpdateRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRebootResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRebootResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateRebootResponse(struct soap *soap, const char *URL, _Upd__UpdateRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRebootResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRebootResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateRebootResponse(struct soap *soap, const char *URL, _Upd__UpdateRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRebootResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRebootResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateRebootResponse(struct soap *soap, const char *URL, _Upd__UpdateRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRebootResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRebootResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateRebootResponse * SOAP_FMAC4 soap_get__Upd__UpdateRebootResponse(struct soap*, _Upd__UpdateRebootResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateRebootResponse(struct soap *soap, _Upd__UpdateRebootResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateRebootResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateRebootResponse(struct soap *soap, const char *URL, _Upd__UpdateRebootResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateRebootResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateRebootResponse(struct soap *soap, _Upd__UpdateRebootResponse *p)
{
	if (::soap_read__Upd__UpdateRebootResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateRequestResponse_DEFINED
#define SOAP_TYPE__Upd__UpdateRequestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateRequestResponse(struct soap*, const char*, int, const _Upd__UpdateRequestResponse *, const char*);
SOAP_FMAC3 _Upd__UpdateRequestResponse * SOAP_FMAC4 soap_in__Upd__UpdateRequestResponse(struct soap*, const char*, _Upd__UpdateRequestResponse *, const char*);
SOAP_FMAC1 _Upd__UpdateRequestResponse * SOAP_FMAC2 soap_instantiate__Upd__UpdateRequestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateRequestResponse * soap_new__Upd__UpdateRequestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateRequestResponse(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateRequestResponse * soap_new_req__Upd__UpdateRequestResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error)
{
	_Upd__UpdateRequestResponse *_p = ::soap_new__Upd__UpdateRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRequestResponse::Error = Error;
	}
	return _p;
}

inline _Upd__UpdateRequestResponse * soap_new_set__Upd__UpdateRequestResponse(
	struct soap *soap,
	enum Upd__ErrCodeDef Error)
{
	_Upd__UpdateRequestResponse *_p = ::soap_new__Upd__UpdateRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRequestResponse::Error = Error;
	}
	return _p;
}

inline int soap_write__Upd__UpdateRequestResponse(struct soap *soap, _Upd__UpdateRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequestResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateRequestResponse(struct soap *soap, const char *URL, _Upd__UpdateRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequestResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateRequestResponse(struct soap *soap, const char *URL, _Upd__UpdateRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequestResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateRequestResponse(struct soap *soap, const char *URL, _Upd__UpdateRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequestResponse", p->soap_type() == SOAP_TYPE__Upd__UpdateRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateRequestResponse * SOAP_FMAC4 soap_get__Upd__UpdateRequestResponse(struct soap*, _Upd__UpdateRequestResponse *, const char*, const char*);

inline int soap_read__Upd__UpdateRequestResponse(struct soap *soap, _Upd__UpdateRequestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateRequestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateRequestResponse(struct soap *soap, const char *URL, _Upd__UpdateRequestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateRequestResponse(struct soap *soap, _Upd__UpdateRequestResponse *p)
{
	if (::soap_read__Upd__UpdateRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__Upd__UpdateRequest_DEFINED
#define SOAP_TYPE__Upd__UpdateRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Upd__UpdateRequest(struct soap*, const char*, int, const _Upd__UpdateRequest *, const char*);
SOAP_FMAC3 _Upd__UpdateRequest * SOAP_FMAC4 soap_in__Upd__UpdateRequest(struct soap*, const char*, _Upd__UpdateRequest *, const char*);
SOAP_FMAC1 _Upd__UpdateRequest * SOAP_FMAC2 soap_instantiate__Upd__UpdateRequest(struct soap*, int, const char*, const char*, size_t*);

inline _Upd__UpdateRequest * soap_new__Upd__UpdateRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate__Upd__UpdateRequest(soap, n, NULL, NULL, NULL);
}

inline _Upd__UpdateRequest * soap_new_req__Upd__UpdateRequest(
	struct soap *soap,
	char *ScriptName)
{
	_Upd__UpdateRequest *_p = ::soap_new__Upd__UpdateRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRequest::ScriptName = ScriptName;
	}
	return _p;
}

inline _Upd__UpdateRequest * soap_new_set__Upd__UpdateRequest(
	struct soap *soap,
	char *ScriptName)
{
	_Upd__UpdateRequest *_p = ::soap_new__Upd__UpdateRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Upd__UpdateRequest::ScriptName = ScriptName;
	}
	return _p;
}

inline int soap_write__Upd__UpdateRequest(struct soap *soap, _Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequest", p->soap_type() == SOAP_TYPE__Upd__UpdateRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Upd__UpdateRequest(struct soap *soap, const char *URL, _Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequest", p->soap_type() == SOAP_TYPE__Upd__UpdateRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__Upd__UpdateRequest(struct soap *soap, const char *URL, _Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequest", p->soap_type() == SOAP_TYPE__Upd__UpdateRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__Upd__UpdateRequest(struct soap *soap, const char *URL, _Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateRequest", p->soap_type() == SOAP_TYPE__Upd__UpdateRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _Upd__UpdateRequest * SOAP_FMAC4 soap_get__Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest *, const char*, const char*);

inline int soap_read__Upd__UpdateRequest(struct soap *soap, _Upd__UpdateRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__Upd__UpdateRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Upd__UpdateRequest(struct soap *soap, const char *URL, _Upd__UpdateRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__Upd__UpdateRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__Upd__UpdateRequest(struct soap *soap, _Upd__UpdateRequest *p)
{
	if (::soap_read__Upd__UpdateRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__UpdateProgressDef_DEFINED
#define SOAP_TYPE_Upd__UpdateProgressDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__UpdateProgressDef(struct soap*, const char*, int, const Upd__UpdateProgressDef *, const char*);
SOAP_FMAC3 Upd__UpdateProgressDef * SOAP_FMAC4 soap_in_Upd__UpdateProgressDef(struct soap*, const char*, Upd__UpdateProgressDef *, const char*);
SOAP_FMAC1 Upd__UpdateProgressDef * SOAP_FMAC2 soap_instantiate_Upd__UpdateProgressDef(struct soap*, int, const char*, const char*, size_t*);

inline Upd__UpdateProgressDef * soap_new_Upd__UpdateProgressDef(struct soap *soap, int n = -1)
{
	return soap_instantiate_Upd__UpdateProgressDef(soap, n, NULL, NULL, NULL);
}

inline Upd__UpdateProgressDef * soap_new_req_Upd__UpdateProgressDef(
	struct soap *soap,
	int CurrentStep,
	int TotalSteps)
{
	Upd__UpdateProgressDef *_p = ::soap_new_Upd__UpdateProgressDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->Upd__UpdateProgressDef::CurrentStep = CurrentStep;
		_p->Upd__UpdateProgressDef::TotalSteps = TotalSteps;
	}
	return _p;
}

inline Upd__UpdateProgressDef * soap_new_set_Upd__UpdateProgressDef(
	struct soap *soap,
	int CurrentStep,
	int TotalSteps)
{
	Upd__UpdateProgressDef *_p = ::soap_new_Upd__UpdateProgressDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->Upd__UpdateProgressDef::CurrentStep = CurrentStep;
		_p->Upd__UpdateProgressDef::TotalSteps = TotalSteps;
	}
	return _p;
}

inline int soap_write_Upd__UpdateProgressDef(struct soap *soap, Upd__UpdateProgressDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateProgressDef", p->soap_type() == SOAP_TYPE_Upd__UpdateProgressDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_Upd__UpdateProgressDef(struct soap *soap, const char *URL, Upd__UpdateProgressDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateProgressDef", p->soap_type() == SOAP_TYPE_Upd__UpdateProgressDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__UpdateProgressDef(struct soap *soap, const char *URL, Upd__UpdateProgressDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateProgressDef", p->soap_type() == SOAP_TYPE_Upd__UpdateProgressDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__UpdateProgressDef(struct soap *soap, const char *URL, Upd__UpdateProgressDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:UpdateProgressDef", p->soap_type() == SOAP_TYPE_Upd__UpdateProgressDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 Upd__UpdateProgressDef * SOAP_FMAC4 soap_get_Upd__UpdateProgressDef(struct soap*, Upd__UpdateProgressDef *, const char*, const char*);

inline int soap_read_Upd__UpdateProgressDef(struct soap *soap, Upd__UpdateProgressDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_Upd__UpdateProgressDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__UpdateProgressDef(struct soap *soap, const char *URL, Upd__UpdateProgressDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__UpdateProgressDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__UpdateProgressDef(struct soap *soap, Upd__UpdateProgressDef *p)
{
	if (::soap_read_Upd__UpdateProgressDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__SlotVersionDef_DEFINED
#define SOAP_TYPE_Upd__SlotVersionDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__SlotVersionDef(struct soap*, const char*, int, const Upd__SlotVersionDef *, const char*);
SOAP_FMAC3 Upd__SlotVersionDef * SOAP_FMAC4 soap_in_Upd__SlotVersionDef(struct soap*, const char*, Upd__SlotVersionDef *, const char*);
SOAP_FMAC1 Upd__SlotVersionDef * SOAP_FMAC2 soap_instantiate_Upd__SlotVersionDef(struct soap*, int, const char*, const char*, size_t*);

inline Upd__SlotVersionDef * soap_new_Upd__SlotVersionDef(struct soap *soap, int n = -1)
{
	return soap_instantiate_Upd__SlotVersionDef(soap, n, NULL, NULL, NULL);
}

inline Upd__SlotVersionDef * soap_new_req_Upd__SlotVersionDef(
	struct soap *soap,
	char *IspVersion,
	char *IswVersion,
	char *CfwVersion,
	char *DfwVersion,
	char *HwVersion)
{
	Upd__SlotVersionDef *_p = ::soap_new_Upd__SlotVersionDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->Upd__SlotVersionDef::IspVersion = IspVersion;
		_p->Upd__SlotVersionDef::IswVersion = IswVersion;
		_p->Upd__SlotVersionDef::CfwVersion = CfwVersion;
		_p->Upd__SlotVersionDef::DfwVersion = DfwVersion;
		_p->Upd__SlotVersionDef::HwVersion = HwVersion;
	}
	return _p;
}

inline Upd__SlotVersionDef * soap_new_set_Upd__SlotVersionDef(
	struct soap *soap,
	char *IspVersion,
	char *IswVersion,
	char *CfwVersion,
	char *DfwVersion,
	char *HwVersion)
{
	Upd__SlotVersionDef *_p = ::soap_new_Upd__SlotVersionDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->Upd__SlotVersionDef::IspVersion = IspVersion;
		_p->Upd__SlotVersionDef::IswVersion = IswVersion;
		_p->Upd__SlotVersionDef::CfwVersion = CfwVersion;
		_p->Upd__SlotVersionDef::DfwVersion = DfwVersion;
		_p->Upd__SlotVersionDef::HwVersion = HwVersion;
	}
	return _p;
}

inline int soap_write_Upd__SlotVersionDef(struct soap *soap, Upd__SlotVersionDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:SlotVersionDef", p->soap_type() == SOAP_TYPE_Upd__SlotVersionDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_Upd__SlotVersionDef(struct soap *soap, const char *URL, Upd__SlotVersionDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:SlotVersionDef", p->soap_type() == SOAP_TYPE_Upd__SlotVersionDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__SlotVersionDef(struct soap *soap, const char *URL, Upd__SlotVersionDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:SlotVersionDef", p->soap_type() == SOAP_TYPE_Upd__SlotVersionDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__SlotVersionDef(struct soap *soap, const char *URL, Upd__SlotVersionDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Upd:SlotVersionDef", p->soap_type() == SOAP_TYPE_Upd__SlotVersionDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 Upd__SlotVersionDef * SOAP_FMAC4 soap_get_Upd__SlotVersionDef(struct soap*, Upd__SlotVersionDef *, const char*, const char*);

inline int soap_read_Upd__SlotVersionDef(struct soap *soap, Upd__SlotVersionDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_Upd__SlotVersionDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__SlotVersionDef(struct soap *soap, const char *URL, Upd__SlotVersionDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__SlotVersionDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__SlotVersionDef(struct soap *soap, Upd__SlotVersionDef *p)
{
	if (::soap_read_Upd__SlotVersionDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___Upd__UpdateGetConfiguration_DEFINED
#define SOAP_TYPE___Upd__UpdateGetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateGetConfiguration(struct soap*, struct __Upd__UpdateGetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateGetConfiguration(struct soap*, const struct __Upd__UpdateGetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateGetConfiguration(struct soap*, const char*, int, const struct __Upd__UpdateGetConfiguration *, const char*);
SOAP_FMAC3 struct __Upd__UpdateGetConfiguration * SOAP_FMAC4 soap_in___Upd__UpdateGetConfiguration(struct soap*, const char*, struct __Upd__UpdateGetConfiguration *, const char*);
SOAP_FMAC1 struct __Upd__UpdateGetConfiguration * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateGetConfiguration * soap_new___Upd__UpdateGetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateGetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateGetConfiguration * soap_new_req___Upd__UpdateGetConfiguration(
	struct soap *soap)
{
	struct __Upd__UpdateGetConfiguration *_p = ::soap_new___Upd__UpdateGetConfiguration(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateGetConfiguration * soap_new_set___Upd__UpdateGetConfiguration(
	struct soap *soap,
	char *Upd__UpdateGetConfiguration)
{
	struct __Upd__UpdateGetConfiguration *_p = ::soap_new___Upd__UpdateGetConfiguration(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetConfiguration(soap, _p);
		_p->Upd__UpdateGetConfiguration = Upd__UpdateGetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateGetConfiguration(struct soap*, const struct __Upd__UpdateGetConfiguration *, const char*, const char*);

inline int soap_write___Upd__UpdateGetConfiguration(struct soap *soap, struct __Upd__UpdateGetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateGetConfiguration(soap, p), 0) || ::soap_put___Upd__UpdateGetConfiguration(soap, p, "-Upd:UpdateGetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateGetConfiguration(struct soap *soap, const char *URL, struct __Upd__UpdateGetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetConfiguration(soap, p), 0) || ::soap_put___Upd__UpdateGetConfiguration(soap, p, "-Upd:UpdateGetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateGetConfiguration(struct soap *soap, const char *URL, struct __Upd__UpdateGetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetConfiguration(soap, p), 0) || ::soap_put___Upd__UpdateGetConfiguration(soap, p, "-Upd:UpdateGetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateGetConfiguration(struct soap *soap, const char *URL, struct __Upd__UpdateGetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetConfiguration(soap, p), 0) || ::soap_put___Upd__UpdateGetConfiguration(soap, p, "-Upd:UpdateGetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateGetConfiguration * SOAP_FMAC4 soap_get___Upd__UpdateGetConfiguration(struct soap*, struct __Upd__UpdateGetConfiguration *, const char*, const char*);

inline int soap_read___Upd__UpdateGetConfiguration(struct soap *soap, struct __Upd__UpdateGetConfiguration *p)
{
	if (p)
	{	::soap_default___Upd__UpdateGetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateGetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateGetConfiguration(struct soap *soap, const char *URL, struct __Upd__UpdateGetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateGetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateGetConfiguration(struct soap *soap, struct __Upd__UpdateGetConfiguration *p)
{
	if (::soap_read___Upd__UpdateGetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___Upd__UpdateGetFailedReason_DEFINED
#define SOAP_TYPE___Upd__UpdateGetFailedReason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateGetFailedReason(struct soap*, struct __Upd__UpdateGetFailedReason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateGetFailedReason(struct soap*, const struct __Upd__UpdateGetFailedReason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateGetFailedReason(struct soap*, const char*, int, const struct __Upd__UpdateGetFailedReason *, const char*);
SOAP_FMAC3 struct __Upd__UpdateGetFailedReason * SOAP_FMAC4 soap_in___Upd__UpdateGetFailedReason(struct soap*, const char*, struct __Upd__UpdateGetFailedReason *, const char*);
SOAP_FMAC1 struct __Upd__UpdateGetFailedReason * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetFailedReason(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateGetFailedReason * soap_new___Upd__UpdateGetFailedReason(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateGetFailedReason(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateGetFailedReason * soap_new_req___Upd__UpdateGetFailedReason(
	struct soap *soap)
{
	struct __Upd__UpdateGetFailedReason *_p = ::soap_new___Upd__UpdateGetFailedReason(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetFailedReason(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateGetFailedReason * soap_new_set___Upd__UpdateGetFailedReason(
	struct soap *soap,
	char *Upd__UpdateGetFailedReason)
{
	struct __Upd__UpdateGetFailedReason *_p = ::soap_new___Upd__UpdateGetFailedReason(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetFailedReason(soap, _p);
		_p->Upd__UpdateGetFailedReason = Upd__UpdateGetFailedReason;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateGetFailedReason(struct soap*, const struct __Upd__UpdateGetFailedReason *, const char*, const char*);

inline int soap_write___Upd__UpdateGetFailedReason(struct soap *soap, struct __Upd__UpdateGetFailedReason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateGetFailedReason(soap, p), 0) || ::soap_put___Upd__UpdateGetFailedReason(soap, p, "-Upd:UpdateGetFailedReason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateGetFailedReason(struct soap *soap, const char *URL, struct __Upd__UpdateGetFailedReason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetFailedReason(soap, p), 0) || ::soap_put___Upd__UpdateGetFailedReason(soap, p, "-Upd:UpdateGetFailedReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateGetFailedReason(struct soap *soap, const char *URL, struct __Upd__UpdateGetFailedReason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetFailedReason(soap, p), 0) || ::soap_put___Upd__UpdateGetFailedReason(soap, p, "-Upd:UpdateGetFailedReason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateGetFailedReason(struct soap *soap, const char *URL, struct __Upd__UpdateGetFailedReason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetFailedReason(soap, p), 0) || ::soap_put___Upd__UpdateGetFailedReason(soap, p, "-Upd:UpdateGetFailedReason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateGetFailedReason * SOAP_FMAC4 soap_get___Upd__UpdateGetFailedReason(struct soap*, struct __Upd__UpdateGetFailedReason *, const char*, const char*);

inline int soap_read___Upd__UpdateGetFailedReason(struct soap *soap, struct __Upd__UpdateGetFailedReason *p)
{
	if (p)
	{	::soap_default___Upd__UpdateGetFailedReason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateGetFailedReason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateGetFailedReason(struct soap *soap, const char *URL, struct __Upd__UpdateGetFailedReason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateGetFailedReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateGetFailedReason(struct soap *soap, struct __Upd__UpdateGetFailedReason *p)
{
	if (::soap_read___Upd__UpdateGetFailedReason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___Upd__UpdateGetStatus_DEFINED
#define SOAP_TYPE___Upd__UpdateGetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateGetStatus(struct soap*, struct __Upd__UpdateGetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateGetStatus(struct soap*, const struct __Upd__UpdateGetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateGetStatus(struct soap*, const char*, int, const struct __Upd__UpdateGetStatus *, const char*);
SOAP_FMAC3 struct __Upd__UpdateGetStatus * SOAP_FMAC4 soap_in___Upd__UpdateGetStatus(struct soap*, const char*, struct __Upd__UpdateGetStatus *, const char*);
SOAP_FMAC1 struct __Upd__UpdateGetStatus * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateGetStatus * soap_new___Upd__UpdateGetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateGetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateGetStatus * soap_new_req___Upd__UpdateGetStatus(
	struct soap *soap)
{
	struct __Upd__UpdateGetStatus *_p = ::soap_new___Upd__UpdateGetStatus(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetStatus(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateGetStatus * soap_new_set___Upd__UpdateGetStatus(
	struct soap *soap,
	char *Upd__UpdateGetStatus)
{
	struct __Upd__UpdateGetStatus *_p = ::soap_new___Upd__UpdateGetStatus(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetStatus(soap, _p);
		_p->Upd__UpdateGetStatus = Upd__UpdateGetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateGetStatus(struct soap*, const struct __Upd__UpdateGetStatus *, const char*, const char*);

inline int soap_write___Upd__UpdateGetStatus(struct soap *soap, struct __Upd__UpdateGetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateGetStatus(soap, p), 0) || ::soap_put___Upd__UpdateGetStatus(soap, p, "-Upd:UpdateGetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateGetStatus(struct soap *soap, const char *URL, struct __Upd__UpdateGetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetStatus(soap, p), 0) || ::soap_put___Upd__UpdateGetStatus(soap, p, "-Upd:UpdateGetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateGetStatus(struct soap *soap, const char *URL, struct __Upd__UpdateGetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetStatus(soap, p), 0) || ::soap_put___Upd__UpdateGetStatus(soap, p, "-Upd:UpdateGetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateGetStatus(struct soap *soap, const char *URL, struct __Upd__UpdateGetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetStatus(soap, p), 0) || ::soap_put___Upd__UpdateGetStatus(soap, p, "-Upd:UpdateGetStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateGetStatus * SOAP_FMAC4 soap_get___Upd__UpdateGetStatus(struct soap*, struct __Upd__UpdateGetStatus *, const char*, const char*);

inline int soap_read___Upd__UpdateGetStatus(struct soap *soap, struct __Upd__UpdateGetStatus *p)
{
	if (p)
	{	::soap_default___Upd__UpdateGetStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateGetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateGetStatus(struct soap *soap, const char *URL, struct __Upd__UpdateGetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateGetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateGetStatus(struct soap *soap, struct __Upd__UpdateGetStatus *p)
{
	if (::soap_read___Upd__UpdateGetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___Upd__UpdateReboot_DEFINED
#define SOAP_TYPE___Upd__UpdateReboot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateReboot(struct soap*, struct __Upd__UpdateReboot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateReboot(struct soap*, const struct __Upd__UpdateReboot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateReboot(struct soap*, const char*, int, const struct __Upd__UpdateReboot *, const char*);
SOAP_FMAC3 struct __Upd__UpdateReboot * SOAP_FMAC4 soap_in___Upd__UpdateReboot(struct soap*, const char*, struct __Upd__UpdateReboot *, const char*);
SOAP_FMAC1 struct __Upd__UpdateReboot * SOAP_FMAC2 soap_instantiate___Upd__UpdateReboot(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateReboot * soap_new___Upd__UpdateReboot(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateReboot(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateReboot * soap_new_req___Upd__UpdateReboot(
	struct soap *soap)
{
	struct __Upd__UpdateReboot *_p = ::soap_new___Upd__UpdateReboot(soap);
	if (_p)
	{	::soap_default___Upd__UpdateReboot(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateReboot * soap_new_set___Upd__UpdateReboot(
	struct soap *soap,
	char *Upd__UpdateReboot)
{
	struct __Upd__UpdateReboot *_p = ::soap_new___Upd__UpdateReboot(soap);
	if (_p)
	{	::soap_default___Upd__UpdateReboot(soap, _p);
		_p->Upd__UpdateReboot = Upd__UpdateReboot;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateReboot(struct soap*, const struct __Upd__UpdateReboot *, const char*, const char*);

inline int soap_write___Upd__UpdateReboot(struct soap *soap, struct __Upd__UpdateReboot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateReboot(soap, p), 0) || ::soap_put___Upd__UpdateReboot(soap, p, "-Upd:UpdateReboot", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateReboot(struct soap *soap, const char *URL, struct __Upd__UpdateReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateReboot(soap, p), 0) || ::soap_put___Upd__UpdateReboot(soap, p, "-Upd:UpdateReboot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateReboot(struct soap *soap, const char *URL, struct __Upd__UpdateReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateReboot(soap, p), 0) || ::soap_put___Upd__UpdateReboot(soap, p, "-Upd:UpdateReboot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateReboot(struct soap *soap, const char *URL, struct __Upd__UpdateReboot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateReboot(soap, p), 0) || ::soap_put___Upd__UpdateReboot(soap, p, "-Upd:UpdateReboot", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateReboot * SOAP_FMAC4 soap_get___Upd__UpdateReboot(struct soap*, struct __Upd__UpdateReboot *, const char*, const char*);

inline int soap_read___Upd__UpdateReboot(struct soap *soap, struct __Upd__UpdateReboot *p)
{
	if (p)
	{	::soap_default___Upd__UpdateReboot(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateReboot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateReboot(struct soap *soap, const char *URL, struct __Upd__UpdateReboot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateReboot(struct soap *soap, struct __Upd__UpdateReboot *p)
{
	if (::soap_read___Upd__UpdateReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___Upd__UpdateRequest_DEFINED
#define SOAP_TYPE___Upd__UpdateRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateRequest(struct soap*, struct __Upd__UpdateRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateRequest(struct soap*, const struct __Upd__UpdateRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateRequest(struct soap*, const char*, int, const struct __Upd__UpdateRequest *, const char*);
SOAP_FMAC3 struct __Upd__UpdateRequest * SOAP_FMAC4 soap_in___Upd__UpdateRequest(struct soap*, const char*, struct __Upd__UpdateRequest *, const char*);
SOAP_FMAC1 struct __Upd__UpdateRequest * SOAP_FMAC2 soap_instantiate___Upd__UpdateRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateRequest * soap_new___Upd__UpdateRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateRequest(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateRequest * soap_new_req___Upd__UpdateRequest(
	struct soap *soap)
{
	struct __Upd__UpdateRequest *_p = ::soap_new___Upd__UpdateRequest(soap);
	if (_p)
	{	::soap_default___Upd__UpdateRequest(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateRequest * soap_new_set___Upd__UpdateRequest(
	struct soap *soap,
	_Upd__UpdateRequest *Upd__UpdateRequest)
{
	struct __Upd__UpdateRequest *_p = ::soap_new___Upd__UpdateRequest(soap);
	if (_p)
	{	::soap_default___Upd__UpdateRequest(soap, _p);
		_p->Upd__UpdateRequest = Upd__UpdateRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateRequest(struct soap*, const struct __Upd__UpdateRequest *, const char*, const char*);

inline int soap_write___Upd__UpdateRequest(struct soap *soap, struct __Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateRequest(soap, p), 0) || ::soap_put___Upd__UpdateRequest(soap, p, "-Upd:UpdateRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateRequest(struct soap *soap, const char *URL, struct __Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateRequest(soap, p), 0) || ::soap_put___Upd__UpdateRequest(soap, p, "-Upd:UpdateRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateRequest(struct soap *soap, const char *URL, struct __Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateRequest(soap, p), 0) || ::soap_put___Upd__UpdateRequest(soap, p, "-Upd:UpdateRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateRequest(struct soap *soap, const char *URL, struct __Upd__UpdateRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateRequest(soap, p), 0) || ::soap_put___Upd__UpdateRequest(soap, p, "-Upd:UpdateRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateRequest * SOAP_FMAC4 soap_get___Upd__UpdateRequest(struct soap*, struct __Upd__UpdateRequest *, const char*, const char*);

inline int soap_read___Upd__UpdateRequest(struct soap *soap, struct __Upd__UpdateRequest *p)
{
	if (p)
	{	::soap_default___Upd__UpdateRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateRequest(struct soap *soap, const char *URL, struct __Upd__UpdateRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateRequest(struct soap *soap, struct __Upd__UpdateRequest *p)
{
	if (::soap_read___Upd__UpdateRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___Upd__UpdateGetInterfaceVersion_DEFINED
#define SOAP_TYPE___Upd__UpdateGetInterfaceVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Upd__UpdateGetInterfaceVersion(struct soap*, struct __Upd__UpdateGetInterfaceVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Upd__UpdateGetInterfaceVersion(struct soap*, const struct __Upd__UpdateGetInterfaceVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Upd__UpdateGetInterfaceVersion(struct soap*, const char*, int, const struct __Upd__UpdateGetInterfaceVersion *, const char*);
SOAP_FMAC3 struct __Upd__UpdateGetInterfaceVersion * SOAP_FMAC4 soap_in___Upd__UpdateGetInterfaceVersion(struct soap*, const char*, struct __Upd__UpdateGetInterfaceVersion *, const char*);
SOAP_FMAC1 struct __Upd__UpdateGetInterfaceVersion * SOAP_FMAC2 soap_instantiate___Upd__UpdateGetInterfaceVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __Upd__UpdateGetInterfaceVersion * soap_new___Upd__UpdateGetInterfaceVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate___Upd__UpdateGetInterfaceVersion(soap, n, NULL, NULL, NULL);
}

inline struct __Upd__UpdateGetInterfaceVersion * soap_new_req___Upd__UpdateGetInterfaceVersion(
	struct soap *soap)
{
	struct __Upd__UpdateGetInterfaceVersion *_p = ::soap_new___Upd__UpdateGetInterfaceVersion(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetInterfaceVersion(soap, _p);
	}
	return _p;
}

inline struct __Upd__UpdateGetInterfaceVersion * soap_new_set___Upd__UpdateGetInterfaceVersion(
	struct soap *soap,
	char *Upd__UpdateGetInterfaceVersion)
{
	struct __Upd__UpdateGetInterfaceVersion *_p = ::soap_new___Upd__UpdateGetInterfaceVersion(soap);
	if (_p)
	{	::soap_default___Upd__UpdateGetInterfaceVersion(soap, _p);
		_p->Upd__UpdateGetInterfaceVersion = Upd__UpdateGetInterfaceVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Upd__UpdateGetInterfaceVersion(struct soap*, const struct __Upd__UpdateGetInterfaceVersion *, const char*, const char*);

inline int soap_write___Upd__UpdateGetInterfaceVersion(struct soap *soap, struct __Upd__UpdateGetInterfaceVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___Upd__UpdateGetInterfaceVersion(soap, p), 0) || ::soap_put___Upd__UpdateGetInterfaceVersion(soap, p, "-Upd:UpdateGetInterfaceVersion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Upd__UpdateGetInterfaceVersion(struct soap *soap, const char *URL, struct __Upd__UpdateGetInterfaceVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetInterfaceVersion(soap, p), 0) || ::soap_put___Upd__UpdateGetInterfaceVersion(soap, p, "-Upd:UpdateGetInterfaceVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___Upd__UpdateGetInterfaceVersion(struct soap *soap, const char *URL, struct __Upd__UpdateGetInterfaceVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetInterfaceVersion(soap, p), 0) || ::soap_put___Upd__UpdateGetInterfaceVersion(soap, p, "-Upd:UpdateGetInterfaceVersion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___Upd__UpdateGetInterfaceVersion(struct soap *soap, const char *URL, struct __Upd__UpdateGetInterfaceVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___Upd__UpdateGetInterfaceVersion(soap, p), 0) || ::soap_put___Upd__UpdateGetInterfaceVersion(soap, p, "-Upd:UpdateGetInterfaceVersion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __Upd__UpdateGetInterfaceVersion * SOAP_FMAC4 soap_get___Upd__UpdateGetInterfaceVersion(struct soap*, struct __Upd__UpdateGetInterfaceVersion *, const char*, const char*);

inline int soap_read___Upd__UpdateGetInterfaceVersion(struct soap *soap, struct __Upd__UpdateGetInterfaceVersion *p)
{
	if (p)
	{	::soap_default___Upd__UpdateGetInterfaceVersion(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___Upd__UpdateGetInterfaceVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Upd__UpdateGetInterfaceVersion(struct soap *soap, const char *URL, struct __Upd__UpdateGetInterfaceVersion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___Upd__UpdateGetInterfaceVersion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___Upd__UpdateGetInterfaceVersion(struct soap *soap, struct __Upd__UpdateGetInterfaceVersion *p)
{
	if (::soap_read___Upd__UpdateGetInterfaceVersion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_Upd__UpdateRequest_DEFINED
#define SOAP_TYPE_PointerTo_Upd__UpdateRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Upd__UpdateRequest(struct soap*, const char *, int, _Upd__UpdateRequest *const*, const char *);
SOAP_FMAC3 _Upd__UpdateRequest ** SOAP_FMAC4 soap_in_PointerTo_Upd__UpdateRequest(struct soap*, const char*, _Upd__UpdateRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest *const*, const char*, const char*);
SOAP_FMAC3 _Upd__UpdateRequest ** SOAP_FMAC4 soap_get_PointerTo_Upd__UpdateRequest(struct soap*, _Upd__UpdateRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToUpd__SlotVersionDef_DEFINED
#define SOAP_TYPE_PointerToUpd__SlotVersionDef_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToUpd__SlotVersionDef(struct soap*, Upd__SlotVersionDef *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToUpd__SlotVersionDef(struct soap*, const char *, int, Upd__SlotVersionDef *const*, const char *);
SOAP_FMAC3 Upd__SlotVersionDef ** SOAP_FMAC4 soap_in_PointerToUpd__SlotVersionDef(struct soap*, const char*, Upd__SlotVersionDef **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToUpd__SlotVersionDef(struct soap*, Upd__SlotVersionDef *const*, const char*, const char*);
SOAP_FMAC3 Upd__SlotVersionDef ** SOAP_FMAC4 soap_get_PointerToUpd__SlotVersionDef(struct soap*, Upd__SlotVersionDef **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToUpd__UpdateProgressDef_DEFINED
#define SOAP_TYPE_PointerToUpd__UpdateProgressDef_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToUpd__UpdateProgressDef(struct soap*, Upd__UpdateProgressDef *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToUpd__UpdateProgressDef(struct soap*, const char *, int, Upd__UpdateProgressDef *const*, const char *);
SOAP_FMAC3 Upd__UpdateProgressDef ** SOAP_FMAC4 soap_in_PointerToUpd__UpdateProgressDef(struct soap*, const char*, Upd__UpdateProgressDef **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToUpd__UpdateProgressDef(struct soap*, Upd__UpdateProgressDef *const*, const char*, const char*);
SOAP_FMAC3 Upd__UpdateProgressDef ** SOAP_FMAC4 soap_get_PointerToUpd__UpdateProgressDef(struct soap*, Upd__UpdateProgressDef **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_Upd__UpdateScriptDef_DEFINED
#define SOAP_TYPE_Upd__UpdateScriptDef_DEFINED

inline void soap_default_Upd__UpdateScriptDef(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Upd__UpdateScriptDef
	*a = SOAP_DEFAULT_Upd__UpdateScriptDef;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Upd__UpdateScriptDef(struct soap*, char *const*);

#define soap_Upd__UpdateScriptDef2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__UpdateScriptDef(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2Upd__UpdateScriptDef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_Upd__UpdateScriptDef(struct soap*, const char*, char **, const char*);

#define soap_instantiate_Upd__UpdateScriptDef soap_instantiate_string


#define soap_new_Upd__UpdateScriptDef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Upd__UpdateScriptDef(struct soap*, char *const*, const char*, const char*);

inline int soap_write_Upd__UpdateScriptDef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_Upd__UpdateScriptDef(soap, p, "Upd:UpdateScriptDef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_Upd__UpdateScriptDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateScriptDef(soap, p, "Upd:UpdateScriptDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__UpdateScriptDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateScriptDef(soap, p, "Upd:UpdateScriptDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__UpdateScriptDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateScriptDef(soap, p, "Upd:UpdateScriptDef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_Upd__UpdateScriptDef(struct soap*, char **, const char*, const char*);

inline int soap_read_Upd__UpdateScriptDef(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_Upd__UpdateScriptDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__UpdateScriptDef(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__UpdateScriptDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__UpdateScriptDef(struct soap *soap, char **p)
{
	if (::soap_read_Upd__UpdateScriptDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_Upd__UpdateInterfaceVersionDef_DEFINED
#define SOAP_TYPE_Upd__UpdateInterfaceVersionDef_DEFINED

inline void soap_default_Upd__UpdateInterfaceVersionDef(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Upd__UpdateInterfaceVersionDef
	*a = SOAP_DEFAULT_Upd__UpdateInterfaceVersionDef;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Upd__UpdateInterfaceVersionDef(struct soap*, char *const*);

#define soap_Upd__UpdateInterfaceVersionDef2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Upd__UpdateInterfaceVersionDef(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2Upd__UpdateInterfaceVersionDef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_Upd__UpdateInterfaceVersionDef(struct soap*, const char*, char **, const char*);

#define soap_instantiate_Upd__UpdateInterfaceVersionDef soap_instantiate_string


#define soap_new_Upd__UpdateInterfaceVersionDef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Upd__UpdateInterfaceVersionDef(struct soap*, char *const*, const char*, const char*);

inline int soap_write_Upd__UpdateInterfaceVersionDef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_Upd__UpdateInterfaceVersionDef(soap, p, "Upd:UpdateInterfaceVersionDef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_Upd__UpdateInterfaceVersionDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateInterfaceVersionDef(soap, p, "Upd:UpdateInterfaceVersionDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_Upd__UpdateInterfaceVersionDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateInterfaceVersionDef(soap, p, "Upd:UpdateInterfaceVersionDef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_Upd__UpdateInterfaceVersionDef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_Upd__UpdateInterfaceVersionDef(soap, p, "Upd:UpdateInterfaceVersionDef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_Upd__UpdateInterfaceVersionDef(struct soap*, char **, const char*, const char*);

inline int soap_read_Upd__UpdateInterfaceVersionDef(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_Upd__UpdateInterfaceVersionDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_Upd__UpdateInterfaceVersionDef(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_Upd__UpdateInterfaceVersionDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_Upd__UpdateInterfaceVersionDef(struct soap *soap, char **p)
{
	if (::soap_read_Upd__UpdateInterfaceVersionDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
